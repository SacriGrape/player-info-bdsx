"use strict";
var SharedPtrBase_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharedPointer = exports.SharedPtr = exports.SharedPtrBase = void 0;
const tslib_1 = require("tslib");
const capi_1 = require("./capi");
const common_1 = require("./common");
const core_1 = require("./core");
const makefunc_1 = require("./makefunc");
const nativeclass_1 = require("./nativeclass");
const nativetype_1 = require("./nativetype");
const singleton_1 = require("./singleton");
let SharedPtrBase = SharedPtrBase_1 = class SharedPtrBase extends nativeclass_1.NativeClass {
    [nativetype_1.NativeType.ctor]() {
        this.useRef = 1;
        this.weakRef = 1;
    }
    addRef() {
        this.interlockedIncrement32(8); // useRef
        this.interlockedIncrement32(16); // weakRef
    }
    release() {
        if (this.interlockedDecrement32(0x8) === 0) {
            this._Destroy();
        }
        if (this.interlockedDecrement32(0xc) === 0) {
            this._DeleteThis();
        }
    }
    _DeleteThis() {
        common_1.abstract();
    }
    _Destroy() {
        common_1.abstract();
    }
    static make(type) {
        return sharedPtrBaseSingleton.newInstance(type, () => {
            class SharedPtrBaseImpl extends SharedPtrBase_1 {
            }
            SharedPtrBaseImpl.define({ value: type });
            return SharedPtrBaseImpl;
        });
    }
};
tslib_1.__decorate([
    nativeclass_1.nativeField(core_1.VoidPointer)
], SharedPtrBase.prototype, "vftable", void 0);
tslib_1.__decorate([
    nativeclass_1.nativeField(nativetype_1.uint32_t)
], SharedPtrBase.prototype, "useRef", void 0);
tslib_1.__decorate([
    nativeclass_1.nativeField(nativetype_1.uint32_t)
], SharedPtrBase.prototype, "weakRef", void 0);
SharedPtrBase = SharedPtrBase_1 = tslib_1.__decorate([
    nativeclass_1.nativeClass()
], SharedPtrBase);
exports.SharedPtrBase = SharedPtrBase;
SharedPtrBase.prototype._Destroy = makefunc_1.makefunc.js([0], makefunc_1.RawTypeId.Void, { this: SharedPtrBase });
SharedPtrBase.prototype._DeleteThis = makefunc_1.makefunc.js([8], makefunc_1.RawTypeId.Void, { this: SharedPtrBase });
const sharedPtrBaseSingleton = new singleton_1.Singleton();
const sizeOfSharedPtrBase = SharedPtrBase[nativetype_1.NativeType.size];
/**
 * wrapper for std::shared_ptr
 */
class SharedPtr extends nativeclass_1.NativeClass {
    [nativetype_1.NativeType.ctor]() {
        this.p = null;
        this.ref = null;
    }
    [nativetype_1.NativeType.dtor]() {
        if (this.ref !== null)
            this.ref.release();
    }
    [nativetype_1.NativeType.ctor_copy](value) {
        this.p = value.p;
        this.ref = value.ref;
        if (this.ref !== null)
            this.ref.addRef();
    }
    [nativetype_1.NativeType.ctor_move](value) {
        this.p = value.p;
        this.ref = value.ref;
        value.p = null;
        value.ref = null;
    }
    ctor_move(value) {
        this.p = value.p;
        this.ref = value.ref;
        value.ref = null;
    }
    assign(value) {
        this[nativetype_1.NativeType.dtor]();
        this[nativetype_1.NativeType.ctor_copy](value);
        return this;
    }
    assign_move(value) {
        this[nativetype_1.NativeType.dtor]();
        this[nativetype_1.NativeType.ctor_move](value);
        return this;
    }
    exists() {
        return this.ref !== null;
    }
    addRef() {
        this.ref.addRef();
    }
    assignTo(dest) {
        const ctor = this.constructor;
        const ptr = dest.as(ctor);
        ptr.assign(this);
    }
    dispose() {
        if (this.ref !== null) {
            this.ref.release();
            this.ref = null;
        }
        this.p = null;
    }
    static make(cls) {
        const clazz = cls;
        return sharedPtrSingleton.newInstance(cls, () => {
            const Base = SharedPtrBase.make(clazz);
            class TypedSharedPtr extends SharedPtr {
                create(vftable) {
                    const size = Base[nativetype_1.NativeType.size];
                    if (size === null)
                        throw Error(`cannot allocate the non sized class`);
                    this.ref = capi_1.capi.malloc(size).as(Base);
                    this.ref.vftable = vftable;
                    this.ref.construct();
                    this.p = this.ref.addAs(clazz, sizeOfSharedPtrBase);
                }
            }
            TypedSharedPtr.define({
                p: clazz.ref(),
                ref: Base.ref(),
            });
            return TypedSharedPtr;
        });
    }
}
exports.SharedPtr = SharedPtr;
const sharedPtrSingleton = new singleton_1.Singleton();
/**
 * @deprecated
 */
class SharedPointer extends core_1.StaticPointer {
    constructor(sharedptr) {
        super(sharedptr.p);
        this.sharedptr = sharedptr;
    }
    assignTo(dest) {
        this.assignTo(dest);
    }
    dispose() {
        this.sharedptr.dispose();
    }
}
exports.SharedPointer = SharedPointer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkcG9pbnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNoYXJlZHBvaW50ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxpQ0FBOEI7QUFDOUIscUNBQW9DO0FBQ3BDLGlDQUFvRDtBQUNwRCx5Q0FBaUQ7QUFDakQsK0NBQXVGO0FBQ3ZGLDZDQUEwRDtBQUMxRCwyQ0FBd0M7QUFHeEMsSUFBYSxhQUFhLHFCQUExQixNQUFhLGFBQWlCLFNBQVEseUJBQVc7SUFTN0MsQ0FBQyx1QkFBVSxDQUFDLElBQUksQ0FBQztRQUNiLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFDRCxNQUFNO1FBQ0YsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztRQUN6QyxJQUFJLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVO0lBQy9DLENBQUM7SUFDRCxPQUFPO1FBQ0gsSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNuQjtRQUNELElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN4QyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDdEI7SUFDTCxDQUFDO0lBQ0QsV0FBVztRQUNQLGlCQUFRLEVBQUUsQ0FBQztJQUNmLENBQUM7SUFDRCxRQUFRO1FBQ0osaUJBQVEsRUFBRSxDQUFDO0lBQ2YsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUksSUFBWTtRQUN2QixPQUFPLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsR0FBRSxFQUFFO1lBQ2hELE1BQU0saUJBQWtCLFNBQVEsZUFBZ0I7YUFDL0M7WUFD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