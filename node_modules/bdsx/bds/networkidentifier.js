"use strict";
var NetworkIdentifier_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.networkHandler = exports.NetworkIdentifier = exports.ServerNetworkHandler = exports.NetworkHandler = void 0;
const tslib_1 = require("tslib");
const assembler_1 = require("bdsx/assembler");
const common_1 = require("bdsx/common");
const dll_1 = require("bdsx/dll");
const hashset_1 = require("bdsx/hashset");
const makefunc_1 = require("bdsx/makefunc");
const nativeclass_1 = require("bdsx/nativeclass");
const nativetype_1 = require("bdsx/nativetype");
const pointer_1 = require("bdsx/pointer");
const source_map_support_1 = require("bdsx/source-map-support");
const util_1 = require("bdsx/util");
const krevent_1 = require("krevent");
const proc_1 = require("./proc");
const raknet_1 = require("./raknet");
class NetworkHandler extends nativeclass_1.NativeClass {
    send(ni, packet, u) {
        common_1.abstract();
    }
    sendInternal(ni, packet, data) {
        common_1.abstract();
    }
    getConnectionFromId(ni) {
        common_1.abstract();
    }
}
exports.NetworkHandler = NetworkHandler;
(function (NetworkHandler) {
    class Connection extends nativeclass_1.NativeClass {
    }
    NetworkHandler.Connection = Connection;
})(NetworkHandler = exports.NetworkHandler || (exports.NetworkHandler = {}));
let ServerNetworkHandler$Client = class ServerNetworkHandler$Client extends nativeclass_1.NativeClass {
};
ServerNetworkHandler$Client = tslib_1.__decorate([
    nativeclass_1.nativeClass(null)
], ServerNetworkHandler$Client);
let ServerNetworkHandler = class ServerNetworkHandler extends nativeclass_1.NativeClass {
    _disconnectClient(client, b, message, d) {
        common_1.abstract();
    }
    _setMotd(motd, shown) {
        common_1.abstract();
    }
    disconnectClient(client, message = "disconnectionScreen.disconnected") {
        const _message = new pointer_1.CxxStringWrapper(true);
        _message[nativetype_1.NativeType.ctor]();
        _message.value = message;
        this._disconnectClient(client, 0, _message, 0);
        _message[nativetype_1.NativeType.dtor]();
    }
    setMotd(motd) {
        const _motd = new pointer_1.CxxStringWrapper(true);
        _motd[nativetype_1.NativeType.ctor]();
        _motd.value = motd;
        this._setMotd(_motd, true);
        _motd[nativetype_1.NativeType.dtor]();
    }
};
ServerNetworkHandler = tslib_1.__decorate([
    nativeclass_1.nativeClass(null)
], ServerNetworkHandler);
exports.ServerNetworkHandler = ServerNetworkHandler;
const identifiers = new hashset_1.HashSet();
const closeEvTarget = new krevent_1.Event();
let NetworkIdentifier = NetworkIdentifier_1 = class NetworkIdentifier extends nativeclass_1.NativeClass {
    constructor(allocate) {
        super(allocate);
    }
    assignTo(target) {
        dll_1.dll.vcruntime140.memcpy(target, this, NetworkHandler[nativeclass_1.NativeClass.contentSize]);
    }
    equals(other) {
        common_1.abstract();
    }
    hash() {
        common_1.abstract();
    }
    getActor() {
        common_1.abstract();
    }
    getAddress() {
        const idx = this.address.GetSystemIndex();
        const rakpeer = exports.networkHandler.instance.peer;
        return rakpeer.GetSystemAddressFromIndex(idx).toString();
    }
    toString() {
        return this.getAddress();
    }
    static fromPointer(ptr) {
        return identifiers.get(ptr.as(NetworkIdentifier_1));
    }
    static [makefunc_1.makefunc.np2js](ptr) {
        let ni = identifiers.get(ptr);
        if (ni)
            return ni;
        ni = new NetworkIdentifier_1(true);
        ni.copyFrom(ptr, NetworkIdentifier_1[nativetype_1.NativeType.size]);
        identifiers.add(ni);
        return ni;
    }
    static all() {
        return identifiers.values();
    }
};
NetworkIdentifier.close = closeEvTarget;
tslib_1.__decorate([
    nativeclass_1.nativeField(raknet_1.RakNet.AddressOrGUID)
], NetworkIdentifier.prototype, "address", void 0);
NetworkIdentifier = NetworkIdentifier_1 = tslib_1.__decorate([
    nativeclass_1.nativeClass()
], NetworkIdentifier);
exports.NetworkIdentifier = NetworkIdentifier;
proc_1.procHacker.hookingRawWithCallOriginal('NetworkHandler::onConnectionClosed#1', makefunc_1.makefunc.np((handler, ni, msg) => {
    try {
        closeEvTarget.fire(ni);
        util_1._tickCallback();
    }
    catch (err) {
        source_map_support_1.remapAndPrintError(err);
    }
    // ni is used after onConnectionClosed. on some message processings.
    // timeout for avoiding the re-allocation
    setTimeout(() => {
        identifiers.delete(ni);
    }, 3000);
}, makefunc_1.RawTypeId.Void, null, NetworkHandler, NetworkIdentifier, pointer_1.CxxStringWrapper), [assembler_1.Register.rcx, assembler_1.Register.rdx, assembler_1.Register.r8, assembler_1.Register.r9], []);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29ya2lkZW50aWZpZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZXR3b3JraWRlbnRpZmllci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDhDQUEwQztBQUMxQyx3Q0FBdUM7QUFDdkMsa0NBQStCO0FBQy9CLDBDQUFpRDtBQUNqRCw0Q0FBb0Q7QUFDcEQsa0RBQXlFO0FBQ3pFLGdEQUE2QztBQUM3QywwQ0FBZ0Q7QUFFaEQsZ0VBQTZEO0FBQzdELG9DQUEwQztBQUMxQyxxQ0FBK0M7QUFLL0MsaUNBQW9DO0FBQ3BDLHFDQUFrQztBQUdsQyxNQUFhLGNBQWUsU0FBUSx5QkFBVztJQUkzQyxJQUFJLENBQUMsRUFBb0IsRUFBRSxNQUFhLEVBQUUsQ0FBUTtRQUM5QyxpQkFBUSxFQUFFLENBQUM7SUFDZixDQUFDO0lBRUQsWUFBWSxDQUFDLEVBQW9CLEVBQUUsTUFBYSxFQUFFLElBQXFCO1FBQ25FLGlCQUFRLEVBQUUsQ0FBQztJQUNmLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxFQUFvQjtRQUNwQyxpQkFBUSxFQUFFLENBQUM7SUFDZixDQUFDO0NBQ0o7QUFmRCx3Q0FlQztBQUVELFdBQWlCLGNBQWM7SUFFM0IsTUFBYSxVQUFXLFNBQVEseUJBQVc7S0FRMUM7SUFSWSx5QkFBVSxhQVF0QixDQUFBO0FBQ0wsQ0FBQyxFQVhnQixjQUFjLEdBQWQsc0JBQWMsS0FBZCxzQkFBYyxRQVc5QjtBQUdELElBQU0sMkJBQTJCLEdBQWpDLE1BQU0sMkJBQTRCLFNBQVEseUJBQVc7Q0FDcEQsQ0FBQTtBQURLLDJCQUEyQjtJQURoQyx5QkFBVyxDQUFDLElBQUksQ0FBQztHQUNaLDJCQUEyQixDQUNoQztBQUdELElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQXFCLFNBQVEseUJBQVc7SUFDdkMsaUJBQWlCLENBQUMsTUFBd0IsRUFBRSxDQUFRLEVBQUUsT0FBd0IsRUFBRSxDQUFRO1FBQzlGLGlCQUFRLEVBQUUsQ0FBQztJQUNmLENB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