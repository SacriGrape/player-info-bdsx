"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RakNet = void 0;
const tslib_1 = require("tslib");
const common_1 = require("bdsx/common");
const nativetype_1 = require("bdsx/nativetype");
const nativeclass_1 = require("bdsx/nativeclass");
const core_1 = require("bdsx/core");
const portDelineator = '|'.charCodeAt(0);
var RakNet;
(function (RakNet) {
    let SystemAddress = class SystemAddress extends nativeclass_1.NativeClass {
        // void SystemAddress::ToString(bool writePort, char *dest, char portDelineator) const
        ToString(writePort, dest, portDelineator) {
            common_1.abstract();
        }
        toString() {
            const dest = Buffer.alloc(128);
            this.ToString(true, dest, portDelineator);
            const len = dest.indexOf(0);
            if (len === -1)
                throw Error('SystemAddress.ToString failed, null character not found');
            return dest.subarray(0, len).toString();
        }
    };
    tslib_1.__decorate([
        nativeclass_1.nativeField(nativetype_1.uint16_t, 130)
    ], SystemAddress.prototype, "systemIndex", void 0);
    SystemAddress = tslib_1.__decorate([
        nativeclass_1.nativeClass(136)
    ], SystemAddress);
    RakNet.SystemAddress = SystemAddress;
    let RakNetGUID = class RakNetGUID extends nativeclass_1.NativeClass {
    };
    tslib_1.__decorate([
        nativeclass_1.nativeField(nativetype_1.bin64_t)
    ], RakNetGUID.prototype, "g", void 0);
    tslib_1.__decorate([
        nativeclass_1.nativeField(nativetype_1.uint16_t)
    ], RakNetGUID.prototype, "systemIndex", void 0);
    RakNetGUID = tslib_1.__decorate([
        nativeclass_1.nativeClass()
    ], RakNetGUID);
    RakNet.RakNetGUID = RakNetGUID;
    let RakPeer = class RakPeer extends nativeclass_1.NativeClass {
        GetSystemAddressFromIndex(idx) {
            common_1.abstract();
        }
    };
    tslib_1.__decorate([
        nativeclass_1.nativeField(core_1.VoidPointer)
    ], RakPeer.prototype, "vftable", void 0);
    RakPeer = tslib_1.__decorate([
        nativeclass_1.nativeClass()
    ], RakPeer);
    RakNet.RakPeer = RakPeer;
    RakNet.UNASSIGNED_RAKNET_GUID = new RakNetGUID(true);
    RakNet.UNASSIGNED_RAKNET_GUID.g = nativetype_1.bin64_t.minus_one;
    RakNet.UNASSIGNED_RAKNET_GUID.systemIndex = -1;
    let AddressOrGUID = class AddressOrGUID extends nativeclass_1.NativeClass {
        GetSystemIndex() {
            const rakNetGuid = this.rakNetGuid;
            if (rakNetGuid !== RakNet.UNASSIGNED_RAKNET_GUID) {
                return rakNetGuid.systemIndex;
            }
            else {
                return this.systemAddress.systemIndex;
            }
        }
    };
    tslib_1.__decorate([
        nativeclass_1.nativeField(RakNetGUID)
    ], AddressOrGUID.prototype, "rakNetGuid", void 0);
    tslib_1.__decorate([
        nativeclass_1.nativeField(SystemAddress)
    ], AddressOrGUID.prototype, "systemAddress", void 0);
    AddressOrGUID = tslib_1.__decorate([
        nativeclass_1.nativeClass()
    ], AddressOrGUID);
    RakNet.AddressOrGUID = AddressOrGUID;
})(RakNet = exports.RakNet || (exports.RakNet = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFrbmV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmFrbmV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSx3Q0FBdUM7QUFDdkMsZ0RBQW9EO0FBQ3BELGtEQUF5RTtBQUN6RSxvQ0FBd0M7QUFFeEMsTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUV6QyxJQUFpQixNQUFNLENBNER0QjtBQTVERCxXQUFpQixNQUFNO0lBR25CLElBQWEsYUFBYSxHQUExQixNQUFhLGFBQWMsU0FBUSx5QkFBVztRQUkxQyxzRkFBc0Y7UUFDdEYsUUFBUSxDQUFDLFNBQWlCLEVBQUUsSUFBZSxFQUFFLGNBQXFCO1lBQzlELGlCQUFRLEVBQUUsQ0FBQztRQUNmLENBQUM7UUFFRCxRQUFRO1lBQ0osTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsY0FBYyxDQUFDLENBQUM7WUFDMUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUM7Z0JBQUUsTUFBTSxLQUFLLENBQUMseURBQXlELENBQUMsQ0FBQztZQUN2RixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzVDLENBQUM7S0FDSixDQUFBO0lBZEc7UUFEQyx5QkFBVyxDQUFDLHFCQUFRLEVBQUUsR0FBRyxDQUFDO3NEQUNOO0lBRlosYUFBYTtRQUR6Qix5QkFBVyxDQUFDLEdBQUcsQ0FBQztPQUNKLGFBQWEsQ0FnQnpCO0lBaEJZLG9CQUFhLGdCQWdCekIsQ0FBQTtJQUdELElBQWEsVUFBVSxHQUF2QixNQUFhLFVBQVcsU0FBUSx5QkFBVztLQUsxQyxDQUFBO0lBSEc7UUFEQyx5QkFBVyxDQUFDLG9CQUFPLENBQUM7eUNBQ1g7SUFFVjtRQURDLHlCQUFXLENBQUMscUJBQVEsQ0FBQzttREFDRDtJQUpaLFVBQVU7UUFEdEIseUJBQVcsRUFBRTtPQUNELFVBQVUsQ0FLdEI7SUFMWSxpQkFBVSxhQUt0QixDQUFBO0lBR0QsSUFBYSxPQUFPLEdBQXBCLE1BQWEsT0FBUSxTQUFRLHlCQUFXO1FBSXBDLHlCQUF5QixDQUFDLEdBQVU7WUFDaEMsaUJBQVEsRUFBRSxDQUFDO1FBQ2YsQ0FBQztLQUNKLENBQUE7SUFMRztRQURDLHlCQUFXLENBQUMsa0JBQVcsQ0FBQzs0Q0FDTDtJQUZYLE9BQU87UUFEbkIseUJBQVcsRUFBRTtPQUNELE9BQU8sQ0FPbkI7SUFQWSxjQUFPLFVBT25CLENBQUE7SUFFWSw2QkFBc0IsR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzRCxPQUFBLHNCQUFzQixDQUFDLENBQUMsR0FBRyxvQkFBTyxDQUFDLFNBQVMsQ0FBQztJQUM3QyxPQUFBLHNCQUFzQixDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUd4QyxJQUFhLGFBQWEsR0FBMUIsTUFBYSxhQUFjLFNBQVEseUJBQVc7UUFNMUMsY0FBYztZQUNWLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDbkMsSUFBSSxVQUFVLEtBQUssT0FBQSxzQkFBc0IsRUFBRTtnQkFDdkMsT0FBTyxVQUFVLENBQUMsV0FBVyxDQUFDO2FBQ2pDO2lCQUFNO2dCQUNILE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7YUFDekM7UUFDTCxDQUFDO0tBQ0osQ0FBQTtJQVpHO1FBREMseUJBQVcsQ0FBQyxVQUFVLENBQUM7cURBQ0Y7SUFFdEI7UUFEQyx5QkFBVyxDQUFDLGFBQWEsQ0FBQzt3REFDQztJQUpuQixhQUFhO1FBRHpCLHlCQUFXLEVBQUU7T0FDRCxhQUFhLENBY3pCO0lBZFksb0JBQWEsZ0JBY3pCLENBQUE7QUFFTCxDQUFDLEVBNURnQixNQUFNLEdBQU4sY0FBTSxLQUFOLGNBQU0sUUE0RHRCIn0=