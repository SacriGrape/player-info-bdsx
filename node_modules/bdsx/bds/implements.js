"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asmcode = require("bdsx/asm/asmcode");
const assembler_1 = require("bdsx/assembler");
const blockpos_1 = require("bdsx/bds/blockpos");
const commandorigin_1 = require("bdsx/bds/commandorigin");
const loopbacksender_1 = require("bdsx/bds/loopbacksender");
const core_1 = require("bdsx/core");
const cxxvector_1 = require("bdsx/cxxvector");
const makefunc_1 = require("bdsx/makefunc");
const mce_1 = require("bdsx/mce");
const nativetype_1 = require("bdsx/nativetype");
const pointer_1 = require("bdsx/pointer");
const sharedpointer_1 = require("bdsx/sharedpointer");
const actor_1 = require("./actor");
const attribute_1 = require("./attribute");
const command_1 = require("./command");
const connreq_1 = require("./connreq");
const dimension_1 = require("./dimension");
const gamemode_1 = require("./gamemode");
const inventory_1 = require("./inventory");
const level_1 = require("./level");
const networkidentifier_1 = require("./networkidentifier");
const packet_1 = require("./packet");
const packets_1 = require("./packets");
const peer_1 = require("./peer");
const player_1 = require("./player");
const proc_1 = require("./proc");
const raknet_1 = require("./raknet");
const raknetinstance_1 = require("./raknetinstance");
const server_1 = require("./server");
const stream_1 = require("./stream");
const block_1 = require("./block");
const hashedstring_1 = require("./hashedstring");
// avoiding circular dependency
// raknet.ts
raknet_1.RakNet.SystemAddress.prototype.ToString = proc_1.procHacker.js("?ToString@SystemAddress@RakNet@@QEBAX_NPEADD@Z", makefunc_1.RawTypeId.Void, { this: raknet_1.RakNet.SystemAddress }, makefunc_1.RawTypeId.Boolean, makefunc_1.RawTypeId.Buffer, makefunc_1.RawTypeId.Int32);
raknet_1.RakNet.RakPeer.prototype.GetSystemAddressFromIndex = makefunc_1.makefunc.js([0xf0], raknet_1.RakNet.SystemAddress, { this: raknet_1.RakNet.RakPeer, structureReturn: true }, makefunc_1.RawTypeId.Int32);
// level.ts
level_1.Level.prototype.createDimension = proc_1.procHacker.js("Level::createDimension", dimension_1.Dimension, { this: level_1.Level }, makefunc_1.RawTypeId.Int32);
level_1.Level.prototype.fetchEntity = proc_1.procHacker.js("Level::fetchEntity", actor_1.Actor, { this: level_1.Level, nullableReturn: true }, makefunc_1.RawTypeId.Bin64, makefunc_1.RawTypeId.Boolean);
level_1.Level.prototype.getActivePlayerCount = proc_1.procHacker.js("Level::getActivePlayerCount", makefunc_1.RawTypeId.Int32, { this: level_1.Level });
level_1.Level.abstract({ players: [cxxvector_1.CxxVector.make(player_1.ServerPlayer.ref()), 0x58] });
level_1.ServerLevel.abstract({
    packetSender: [loopbacksender_1.LoopbackPacketSender.ref(), 0x830],
    actors: [cxxvector_1.CxxVector.make(actor_1.Actor.ref()), 0x1590],
});
// commandorigin.ts
commandorigin_1.CommandOrigin.define({
    vftable: core_1.VoidPointer,
    uuid: mce_1.mce.UUID,
    level: level_1.ServerLevel.ref(),
});
commandorigin_1.PlayerCommandOrigin.abstract({});
commandorigin_1.ScriptCommandOrigin.abstract({});
commandorigin_1.ServerCommandOrigin.abstract({}, 0x58);
const ServerCommandOrigin_vftable = proc_1.proc["ServerCommandOrigin::`vftable'"];
commandorigin_1.ServerCommandOrigin.prototype.isServerCommandOrigin = function () {
    return this.vftable.equals(ServerCommandOrigin_vftable);
};
// void destruct(CommandOrigin* origin);
commandorigin_1.CommandOrigin.prototype.destruct = makefunc_1.makefunc.js([0x00], makefunc_1.RawTypeId.Void, { this: commandorigin_1.CommandOrigin });
// std::string CommandOrigin::getRequestId();
const getRequestId = makefunc_1.makefunc.js([0x08], pointer_1.CxxStringWrapper, { this: commandorigin_1.CommandOrigin, structureReturn: true });
commandorigin_1.CommandOrigin.prototype.getRequestId = function () {
    const p = getRequestId.call(this);
    const str = p.value;
    p.destruct();
    return str;
};
// std::string CommandOrigin::getName();
const getName = makefunc_1.makefunc.js([0x10], pointer_1.CxxStringWrapper, { this: commandorigin_1.CommandOrigin, structureReturn: true });
commandorigin_1.CommandOrigin.prototype.getName = function () {
    const p = getName.call(this);
    const str = p.value;
    p.destruct();
    return str;
};
// BlockPos CommandOrigin::getBlockPosition();
commandorigin_1.CommandOrigin.prototype.getBlockPosition = makefunc_1.makefunc.js([0x18], blockpos_1.BlockPos, { this: commandorigin_1.CommandOrigin, structureReturn: true });
// Vec3 getWorldPosition(CommandOrigin* origin);
commandorigin_1.CommandOrigin.prototype.getWorldPosition = makefunc_1.makefunc.js([0x20], blockpos_1.Vec3, { this: commandorigin_1.CommandOrigin, structureReturn: true });
// Level* getLevel(CommandOrigin* origin);
commandorigin_1.CommandOrigin.prototype.getLevel = makefunc_1.makefunc.js([0x28], level_1.Level, { this: commandorigin_1.CommandOrigin });
// Dimension* (*getDimension)(CommandOrigin* origin);
commandorigin_1.CommandOrigin.prototype.getDimension = makefunc_1.makefunc.js([0x30], dimension_1.Dimension, { this: commandorigin_1.CommandOrigin });
// Actor* getEntity(CommandOrigin* origin);
commandorigin_1.CommandOrigin.prototype.getEntity = makefunc_1.makefunc.js([0x30], actor_1.Actor, { this: commandorigin_1.CommandOrigin });
// command.ts
command_1.MinecraftCommands.abstract({
    sender: command_1.CommandOutputSender.ref(),
    registry: command_1.CommandRegistry.ref(),
    u2: nativetype_1.bin64_t,
    minecraft: server_1.Minecraft.ref(),
});
command_1.MinecraftCommands.prototype.executeCommand = proc_1.procHacker.js('MinecraftCommands::executeCommand', command_1.MCRESULT, { this: command_1.MinecraftCommands, structureReturn: true }, sharedpointer_1.SharedPtr.make(command_1.CommandContext), makefunc_1.RawTypeId.Boolean);
command_1.CommandRegistry.Signature.abstract({
    command: nativetype_1.CxxString,
    description: nativetype_1.CxxString,
    overloads: cxxvector_1.CxxVector.make(command_1.CommandRegistry.Overload),
});
command_1.CommandRegistry.prototype.registerOverloadInternal = proc_1.procHacker.js('CommandRegistry::registerOverloadInternal', makefunc_1.RawTypeId.Void, { this: command_1.CommandRegistry }, command_1.CommandRegistry.Signature, command_1.CommandRegistry.Overload);
command_1.CommandRegistry.prototype._registerCommand = proc_1.procHacker.js("CommandRegistry::registerCommand", makefunc_1.RawTypeId.Void, { this: command_1.CommandRegistry }, pointer_1.CxxStringWrapper, makefunc_1.RawTypeId.StringUtf8, makefunc_1.RawTypeId.Int32, makefunc_1.RawTypeId.Int32, makefunc_1.RawTypeId.Int32);
command_1.CommandRegistry.prototype._findCommand = proc_1.procHacker.js("CommandRegistry::findCommand", command_1.CommandRegistry.Signature, { this: command_1.CommandRegistry, nullableReturn: true }, pointer_1.CxxStringWrapper);
command_1.CommandRegistry.Overload.define({
    commandVersion: nativetype_1.bin64_t,
    allocator: core_1.VoidPointer,
    u3: nativetype_1.bin64_t,
    u4: nativetype_1.bin64_t,
    u5: nativetype_1.bin64_t,
    u6: nativetype_1.int32_t,
}, 0x30);
// actor.ts
const actorMaps = new Map();
const ServerPlayer_vftable = proc_1.proc["ServerPlayer::`vftable'"];
actor_1.Actor.prototype.isPlayer = function () {
    return this.vftable.equals(ServerPlayer_vftable);
};
actor_1.Actor._singletoning = function (ptr) {
    if (ptr.isNull())
        return null;
    const binptr = ptr.getAddressBin();
    let actor = actorMaps.get(binptr);
    if (actor)
        return actor;
    if (ptr.getPointer().equals(ServerPlayer_vftable)) {
        actor = ptr.as(player_1.ServerPlayer);
    }
    else {
        actor = ptr.as(actor_1.Actor);
    }
    actorMaps.set(binptr, actor);
    return actor;
};
actor_1.Actor.all = function () {
    return actorMaps.values();
};
actor_1.Actor.abstract({
    vftable: core_1.VoidPointer,
    dimension: [dimension_1.Dimension, 0x350],
    identifier: [nativetype_1.CxxString, 0x458],
    attributes: [attribute_1.BaseAttributeMap.ref(), 0x480],
    runtimeId: [actor_1.ActorRuntimeID, 0x540],
});
actor_1.Actor.prototype._sendNetworkPacket = proc_1.procHacker.js("ServerPlayer::sendNetworkPacket", makefunc_1.RawTypeId.Void, { this: actor_1.Actor }, core_1.VoidPointer);
actor_1.Actor.prototype._getName = proc_1.procHacker.js("Actor::getNameTag", pointer_1.CxxStringWrapper, { this: actor_1.Actor });
actor_1.Actor.prototype._addTag = proc_1.procHacker.js("Actor::addTag", makefunc_1.RawTypeId.Boolean, { this: actor_1.Actor }, pointer_1.CxxStringWrapper);
actor_1.Actor.prototype._hasTag = proc_1.procHacker.js("Actor::hasTag", makefunc_1.RawTypeId.Boolean, { this: actor_1.Actor }, pointer_1.CxxStringWrapper);
actor_1.Actor.prototype.getPosition = proc_1.procHacker.js("Actor::getPos", blockpos_1.Vec3, { this: actor_1.Actor });
actor_1.Actor.prototype.getRegion = proc_1.procHacker.js("Actor::getRegionConst", block_1.BlockSource, { this: actor_1.Actor });
actor_1.Actor.prototype.getUniqueIdPointer = proc_1.procHacker.js("Actor::getUniqueID", core_1.StaticPointer, { this: actor_1.Actor });
actor_1.Actor.prototype.getTypeId = makefunc_1.makefunc.js([0x518], makefunc_1.RawTypeId.Int32, { this: actor_1.Actor }); // ActorType getEntityTypeId()
actor_1.Actor.prototype._getDimensionId = makefunc_1.makefunc.js([0x568], makefunc_1.RawTypeId.Void, { this: actor_1.Actor }, makefunc_1.RawTypeId.Buffer); // DimensionId* getDimensionId(DimensionId*)
actor_1.Actor.fromUniqueIdBin = function (bin) {
    return server_1.serverInstance.minecraft.something.level.fetchEntity(bin, true);
};
const attribNames = [
    "minecraft:zombie.spawn.reinforcements",
    "minecraft:player.hunger",
    "minecraft:player.saturation",
    "minecraft:player.exhaustion",
    "minecraft:player.level",
    "minecraft:player.experience",
    "minecraft:health",
    "minecraft:follow_range",
    "minecraft:knockback_registance",
    "minecraft:movement",
    "minecraft:underwater_movement",
    "minecraft:attack_damage",
    "minecraft:absorption",
    "minecraft:luck",
    "minecraft:horse.jump_strength",
];
actor_1.Actor.prototype._sendAttributePacket = function (id, value, attr) {
    const packet = packets_1.UpdateAttributesPacket.create();
    packet.actorId = this.runtimeId;
    const data = new packets_1.AttributeData(true);
    data.construct();
    data.name.set(attribNames[id - 1]);
    data.current = value;
    data.min = attr.minValue;
    data.max = attr.maxValue;
    data.default = attr.defaultValue;
    packet.attributes.push(data);
    data.destruct();
    this._sendNetworkPacket(packet);
    packet.dispose();
};
function _removeActor(actor) {
    actorMaps.delete(actor.getAddressBin());
}
proc_1.procHacker.hookingRawWithCallOriginal('Level::removeEntityReferences', makefunc_1.makefunc.np((level, actor, b) => {
    _removeActor(actor);
}, makefunc_1.RawTypeId.Void, null, level_1.Level, actor_1.Actor, makefunc_1.RawTypeId.Boolean), [assembler_1.Register.rcx, assembler_1.Register.rdx, assembler_1.Register.r8], []);
asmcode.removeActor = makefunc_1.makefunc.np(_removeActor, makefunc_1.RawTypeId.Void, null, actor_1.Actor);
proc_1.procHacker.hookingRawWithCallOriginal('Actor::~Actor', asmcode.actorDestructorHook, [assembler_1.Register.rcx], []);
// player.ts
player_1.Player.prototype._setName = proc_1.procHacker.js("Player::setName", makefunc_1.RawTypeId.Void, { this: player_1.Player }, pointer_1.CxxStringWrapper);
player_1.Player.prototype.changeDimension = proc_1.procHacker.js("ServerPlayer::changeDimension", makefunc_1.RawTypeId.Void, { this: player_1.Player }, makefunc_1.RawTypeId.Int32, makefunc_1.RawTypeId.Boolean);
player_1.Player.prototype.teleportTo = proc_1.procHacker.js("Player::teleportTo", makefunc_1.RawTypeId.Void, { this: player_1.Player }, blockpos_1.Vec3, makefunc_1.RawTypeId.Boolean, makefunc_1.RawTypeId.Int32, makefunc_1.RawTypeId.Int32, makefunc_1.RawTypeId.Bin64);
player_1.Player.prototype.getInventory = proc_1.procHacker.js("Player::getSupplies", inventory_1.PlayerInventory, { this: player_1.Player });
player_1.ServerPlayer.abstract({
    networkIdentifier: [networkidentifier_1.NetworkIdentifier, 0x9f0]
});
player_1.ServerPlayer.prototype._sendInventory = proc_1.procHacker.js("ServerPlayer::sendInventory", makefunc_1.RawTypeId.Void, { this: player_1.ServerPlayer });
player_1.ServerPlayer.prototype.openInventory = proc_1.procHacker.js("ServerPlayer::openInventory", makefunc_1.RawTypeId.Void, { this: player_1.ServerPlayer });
player_1.ServerPlayer.prototype.sendNetworkPacket = proc_1.procHacker.js("ServerPlayer::sendNetworkPacket", makefunc_1.RawTypeId.Void, { this: player_1.ServerPlayer }, core_1.VoidPointer);
player_1.ServerPlayer.prototype.getNetworkIdentifier = function () {
    return this.networkIdentifier;
};
// networkidentifier.ts
networkidentifier_1.NetworkIdentifier.prototype.getActor = function () {
    return ServerNetworkHandler$_getServerPlayer(server_1.serverInstance.minecraft.something.shandler, this, 0);
};
networkidentifier_1.NetworkIdentifier.prototype.equals = proc_1.procHacker.js("NetworkIdentifier::operator==", makefunc_1.RawTypeId.Boolean, { this: networkidentifier_1.NetworkIdentifier }, networkidentifier_1.NetworkIdentifier);
asmcode.NetworkIdentifierGetHash = proc_1.proc['NetworkIdentifier::getHash'];
networkidentifier_1.NetworkIdentifier.prototype.hash = makefunc_1.makefunc.js(asmcode.networkIdentifierHash, makefunc_1.RawTypeId.Int32, { this: networkidentifier_1.NetworkIdentifier });
networkidentifier_1.NetworkHandler.Connection.abstract({
    networkIdentifier: networkidentifier_1.NetworkIdentifier,
    u1: core_1.VoidPointer,
    u2: core_1.VoidPointer,
    u3: core_1.VoidPointer,
    epeer: sharedpointer_1.SharedPtr.make(peer_1.EncryptedNetworkPeer),
    bpeer: sharedpointer_1.SharedPtr.make(peer_1.BatchedNetworkPeer),
    bpeer2: sharedpointer_1.SharedPtr.make(peer_1.BatchedNetworkPeer),
});
networkidentifier_1.NetworkHandler.abstract({
    vftable: core_1.VoidPointer,
    instance: [raknetinstance_1.RakNetInstance.ref(), 0x48]
});
// NetworkHandler::Connection* NetworkHandler::getConnectionFromId(const NetworkIdentifier& ni)
networkidentifier_1.NetworkHandler.prototype.getConnectionFromId = proc_1.procHacker.js(`NetworkHandler::_getConnectionFromId`, networkidentifier_1.NetworkHandler.Connection, { this: networkidentifier_1.NetworkHandler });
// void NetworkHandler::send(const NetworkIdentifier& ni, Packet* packet, unsigned char u)
networkidentifier_1.NetworkHandler.prototype.send = proc_1.procHacker.js('NetworkHandler::send', makefunc_1.RawTypeId.Void, { this: networkidentifier_1.NetworkHandler }, networkidentifier_1.NetworkIdentifier, packet_1.Packet, makefunc_1.RawTypeId.Int32);
// void NetworkHandler::_sendInternal(const NetworkIdentifier& ni, Packet* packet, std::string& data)
networkidentifier_1.NetworkHandler.prototype.sendInternal = proc_1.procHacker.js('NetworkHandler::_sendInternal', makefunc_1.RawTypeId.Void, { this: networkidentifier_1.NetworkHandler }, networkidentifier_1.NetworkIdentifier, packet_1.Packet, pointer_1.CxxStringWrapper);
peer_1.BatchedNetworkPeer.prototype.sendPacket = proc_1.procHacker.js('BatchedNetworkPeer::sendPacket', makefunc_1.RawTypeId.Void, { this: peer_1.BatchedNetworkPeer }, pointer_1.CxxStringWrapper, makefunc_1.RawTypeId.Int32, makefunc_1.RawTypeId.Int32, makefunc_1.RawTypeId.Int32, makefunc_1.RawTypeId.Int32);
// packet.ts
packet_1.Packet.prototype.sendTo = function (target, unknownarg = 0) {
    networkidentifier_1.networkHandler.send(target, this, unknownarg);
};
packet_1.Packet.prototype.destruct = makefunc_1.makefunc.js([0x0], makefunc_1.RawTypeId.Void, { this: packet_1.Packet });
packet_1.Packet.prototype.getId = makefunc_1.makefunc.js([0x8], makefunc_1.RawTypeId.Int32, { this: packet_1.Packet });
packet_1.Packet.prototype.getName = makefunc_1.makefunc.js([0x10], makefunc_1.RawTypeId.Void, { this: packet_1.Packet }, pointer_1.CxxStringWrapper);
packet_1.Packet.prototype.write = makefunc_1.makefunc.js([0x18], makefunc_1.RawTypeId.Void, { this: packet_1.Packet }, stream_1.BinaryStream);
packet_1.Packet.prototype.read = makefunc_1.makefunc.js([0x20], makefunc_1.RawTypeId.Int32, { this: packet_1.Packet }, stream_1.BinaryStream);
packet_1.Packet.prototype.readExtended = makefunc_1.makefunc.js([0x28], packet_1.ExtendedStreamReadResult, { this: packet_1.Packet }, packet_1.ExtendedStreamReadResult, stream_1.BinaryStream);
// Packet.prototype.unknown = makefunc.js([0x30], RawTypeId.Boolean, {this:Packet});
const ServerNetworkHandler$_getServerPlayer = proc_1.procHacker.js("ServerNetworkHandler::_getServerPlayer", player_1.ServerPlayer, { nullableReturn: true }, networkidentifier_1.ServerNetworkHandler, networkidentifier_1.NetworkIdentifier, makefunc_1.RawTypeId.Int32);
networkidentifier_1.ServerNetworkHandler.prototype._setMotd = proc_1.procHacker.js("ServerNetworkHandler::allowIncomingConnections", makefunc_1.RawTypeId.Void, { this: networkidentifier_1.ServerNetworkHandler }, pointer_1.CxxStringWrapper, makefunc_1.RawTypeId.Boolean);
networkidentifier_1.ServerNetworkHandler.prototype._disconnectClient = proc_1.procHacker.js("ServerNetworkHandler::disconnectClient", makefunc_1.RawTypeId.Void, { this: networkidentifier_1.ServerNetworkHandler }, networkidentifier_1.NetworkIdentifier, makefunc_1.RawTypeId.Int32, pointer_1.CxxStringWrapper, makefunc_1.RawTypeId.Int32);
// connreq.ts
connreq_1.Certificate.prototype.getXuid = function () {
    const out = getXuid(this);
    const xuid = out.value;
    out.destruct();
    return xuid;
};
connreq_1.Certificate.prototype.getIdentityName = function () {
    const out = getIdentityName(this);
    const id = out.value;
    out.destruct();
    return id;
};
connreq_1.Certificate.prototype.getIdentity = function () {
    return getIdentity(this).value;
};
const getXuid = proc_1.procHacker.js("ExtendedCertificate::getXuid", pointer_1.CxxStringWrapper, { structureReturn: true }, connreq_1.Certificate);
const getIdentityName = proc_1.procHacker.js("ExtendedCertificate::getIdentityName", pointer_1.CxxStringWrapper, { structureReturn: true }, connreq_1.Certificate);
const getIdentity = proc_1.procHacker.js("ExtendedCertificate::getIdentity", mce_1.mce.UUIDWrapper, { structureReturn: true }, connreq_1.Certificate);
connreq_1.ConnectionRequest.abstract({
    cert: [connreq_1.Certificate.ref(), 0x08],
    something: [connreq_1.Certificate.ref(), 0x10],
});
// attribute.ts
attribute_1.AttributeInstance.abstract({
    vftable: core_1.VoidPointer,
    u1: core_1.VoidPointer,
    u2: core_1.VoidPointer,
    currentValue: [nativetype_1.float32_t, 0x84],
    minValue: [nativetype_1.float32_t, 0x7C],
    maxValue: [nativetype_1.float32_t, 0x80],
    defaultValue: [nativetype_1.float32_t, 0x78],
});
attribute_1.BaseAttributeMap.prototype.getMutableInstance = proc_1.procHacker.js("?getMutableInstance@BaseAttributeMap@@QEAAPEAVAttributeInstance@@I@Z", attribute_1.AttributeInstance, { this: attribute_1.BaseAttributeMap, nullableReturn: true }, makefunc_1.RawTypeId.Int32);
// server.ts
server_1.VanilaGameModuleServer.abstract({
    listener: [server_1.VanilaServerGameplayEventListener.ref(), 0x8]
});
server_1.DedicatedServer.abstract({});
server_1.Minecraft$Something.abstract({
    network: networkidentifier_1.NetworkHandler.ref(),
    level: level_1.ServerLevel.ref(),
    shandler: networkidentifier_1.ServerNetworkHandler.ref(),
});
server_1.Minecraft.abstract({
    vftable: core_1.VoidPointer,
    serverInstance: server_1.ServerInstance.ref(),
    minecraftEventing: server_1.MinecraftEventing.ref(),
    resourcePackManager: server_1.ResourcePackManager.ref(),
    offset_20: core_1.VoidPointer,
    vanillaGameModuleServer: [sharedpointer_1.SharedPtr, 0x28],
    whitelist: server_1.Whitelist.ref(),
    permissionsJsonFileName: nativetype_1.CxxString.ref(),
    privateKeyManager: server_1.PrivateKeyManager.ref(),
    serverMetrics: [server_1.ServerMetrics.ref(), 0x78],
    commands: [command_1.MinecraftCommands.ref(), 0xa0],
    something: server_1.Minecraft$Something.ref(),
    network: [networkidentifier_1.NetworkHandler.ref(), 0xc0],
    LoopbackPacketSender: loopbacksender_1.LoopbackPacketSender.ref(),
    server: server_1.DedicatedServer.ref(),
    entityRegistryOwned: [sharedpointer_1.SharedPtr.make(server_1.EntityRegistryOwned), 0xe0],
});
server_1.Minecraft.prototype.getLevel = proc_1.procHacker.js("Minecraft::getLevel", level_1.Level, { this: server_1.Minecraft });
server_1.ScriptFramework.abstract({
    vftable: core_1.VoidPointer,
});
server_1.MinecraftServerScriptEngine.abstract({
    scriptEngineVftable: [core_1.VoidPointer, 0x428]
});
server_1.ServerInstance.abstract({
    vftable: core_1.VoidPointer,
    server: [server_1.DedicatedServer.ref(), 0x98],
    minecraft: [server_1.Minecraft.ref(), 0xa0],
    networkHandler: [networkidentifier_1.NetworkHandler.ref(), 0xa8],
    scriptEngine: [server_1.MinecraftServerScriptEngine.ref(), 0x210],
});
// gamemode.ts
gamemode_1.GameMode.define({
    actor: [actor_1.Actor.ref(), 8]
});
// inventory.ts
inventory_1.Item.prototype._getCommandName = proc_1.procHacker.js("Item::getCommandName", pointer_1.CxxStringWrapper, { this: inventory_1.Item });
inventory_1.Item.prototype.allowOffhand = proc_1.procHacker.js("Item::allowOffhand", makefunc_1.RawTypeId.Boolean, { this: inventory_1.Item });
inventory_1.Item.prototype.isDamageable = proc_1.procHacker.js("Item::isDamageable", makefunc_1.RawTypeId.Boolean, { this: inventory_1.Item });
inventory_1.Item.prototype.isFood = proc_1.procHacker.js("Item::isFood", makefunc_1.RawTypeId.Boolean, { this: inventory_1.Item });
inventory_1.Item.prototype.setAllowOffhand = proc_1.procHacker.js("Item::setAllowOffhand", makefunc_1.RawTypeId.Void, { this: inventory_1.Item }, makefunc_1.RawTypeId.Boolean);
inventory_1.Item.prototype.getCreativeCategory = proc_1.procHacker.js("Item::getCreativeCategory", makefunc_1.RawTypeId.Int32, { this: inventory_1.Item });
inventory_1.ItemStack.abstract({
    amount: [nativetype_1.uint8_t, 0x22],
});
inventory_1.ItemStack.prototype._getId = proc_1.procHacker.js("ItemStackBase::getId", makefunc_1.RawTypeId.Int32, { this: inventory_1.ItemStack });
inventory_1.ItemStack.prototype._getItem = proc_1.procHacker.js("ItemStackBase::getItem", inventory_1.Item, { this: inventory_1.ItemStack });
inventory_1.ItemStack.prototype._setCustomName = proc_1.procHacker.js("ItemStackBase::setCustomName", makefunc_1.RawTypeId.Void, { this: inventory_1.ItemStack }, pointer_1.CxxStringWrapper);
inventory_1.ItemStack.prototype.hasCustomName = proc_1.procHacker.js("ItemStackBase::hasCustomHoverName", makefunc_1.RawTypeId.Boolean, { this: inventory_1.ItemStack });
inventory_1.ItemStack.prototype.isBlock = proc_1.procHacker.js("ItemStackBase::isBlock", makefunc_1.RawTypeId.Boolean, { this: inventory_1.ItemStack });
inventory_1.ItemStack.prototype.isNull = proc_1.procHacker.js("ItemStackBase::isNull", makefunc_1.RawTypeId.Boolean, { this: inventory_1.ItemStack });
inventory_1.PlayerInventory.prototype.getItem = proc_1.procHacker.js("PlayerInventory::getItem", inventory_1.ItemStack, { this: inventory_1.PlayerInventory }, makefunc_1.RawTypeId.Int32, makefunc_1.RawTypeId.Int32);
// block.ts
block_1.BlockLegacy.prototype._getCommandName = proc_1.procHacker.js("BlockLegacy::getCommandName", pointer_1.CxxStringWrapper, { this: block_1.BlockLegacy });
block_1.BlockLegacy.prototype.getCreativeCategory = proc_1.procHacker.js("BlockLegacy::getCreativeCategory", makefunc_1.RawTypeId.Int32, { this: block_1.Block });
block_1.BlockLegacy.prototype.setDestroyTime = proc_1.procHacker.js("BlockLegacy::setDestroyTime", makefunc_1.RawTypeId.Void, { this: block_1.Block }, makefunc_1.RawTypeId.Float32);
block_1.Block.abstract({
    blockLegacy: [block_1.BlockLegacy.ref(), 0x10],
});
block_1.Block.prototype._getName = proc_1.procHacker.js("Block::getName", hashedstring_1.HashedString, { this: block_1.Block });
block_1.BlockSource.prototype.getBlock = proc_1.procHacker.js("BlockSource::getBlock", block_1.Block, { this: block_1.BlockSource }, blockpos_1.BlockPos);
//# sourceMappingURL=data:application/json;base64,