"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Actor = exports.ActorType = exports.ActorRuntimeID = exports.DimensionId = exports.ActorUniqueID = void 0;
const bin_1 = require("bdsx/bin");
const common_1 = require("bdsx/common");
const core_1 = require("bdsx/core");
const makefunc_1 = require("bdsx/makefunc");
const nativeclass_1 = require("bdsx/nativeclass");
const nativetype_1 = require("bdsx/nativetype");
const pointer_1 = require("bdsx/pointer");
const attribute_1 = require("./attribute");
exports.ActorUniqueID = nativetype_1.bin64_t.extends();
var DimensionId;
(function (DimensionId) {
    DimensionId[DimensionId["Overworld"] = 0] = "Overworld";
    DimensionId[DimensionId["Nether"] = 1] = "Nether";
    DimensionId[DimensionId["TheEnd"] = 2] = "TheEnd";
})(DimensionId = exports.DimensionId || (exports.DimensionId = {}));
class ActorRuntimeID extends core_1.VoidPointer {
}
exports.ActorRuntimeID = ActorRuntimeID;
var ActorType;
(function (ActorType) {
    ActorType[ActorType["Player"] = 319] = "Player";
})(ActorType = exports.ActorType || (exports.ActorType = {}));
class Actor extends nativeclass_1.NativeClass {
    _getName() {
        common_1.abstract();
    }
    _addTag(tag) {
        common_1.abstract();
    }
    _hasTag(tag) {
        common_1.abstract();
    }
    _sendNetworkPacket(packet) {
        common_1.abstract();
    }
    _sendAttributePacket(id, value, attr) {
        common_1.abstract();
    }
    sendPacket(packet) {
        if (!this.isPlayer())
            throw Error("this is not ServerPlayer");
        this._sendNetworkPacket(packet);
    }
    //     static fromPointer(ptr:StaticPointer):Actor;
    //     static fromUniqueId(_64bit_low:number, _64bit_high:number):Actor|null;
    _getDimensionId(out) {
        common_1.abstract();
    }
    getDimension() {
        const out = new Int32Array(1);
        this._getDimensionId(out);
        return out[0];
    }
    /**
     * @deprecated use actor.identifier
     */
    getIdentifier() {
        return this.identifier;
    }
    isPlayer() {
        common_1.abstract();
    }
    getName() {
        return this._getName().value;
    }
    getNetworkIdentifier() {
        throw Error(`this is not player`);
    }
    getPosition() {
        common_1.abstract();
    }
    getRegion() {
        common_1.abstract();
    }
    getUniqueIdLow() {
        return this.getUniqueIdPointer().getInt32(0);
    }
    getUniqueIdHigh() {
        return this.getUniqueIdPointer().getInt32(4);
    }
    getUniqueIdBin() {
        return this.getUniqueIdPointer().getBin64();
    }
    /**
     * it returns address of the unique id field
     */
    getUniqueIdPointer() {
        common_1.abstract();
    }
    getTypeId() {
        common_1.abstract();
    }
    getAttribute(id) {
        const attr = this.attributes.getMutableInstance(id);
        if (attr === null)
            return 0;
        return attr.currentValue;
    }
    setAttribute(id, value) {
        if (id < 1)
            return;
        if (id > 15)
            return;
        const attr = this.attributes.getMutableInstance(id);
        if (attr === null)
            throw Error(`${this.identifier} has not ${attribute_1.AttributeId[id] || 'Attribute' + id}`);
        attr.currentValue = value;
        if (this.isPlayer()) {
            this._sendAttributePacket(id, value, attr);
        }
    }
    /**
     * @deprecated use actor.runtimeId
     */
    getRuntimeId() {
        return this.runtimeId.add();
    }
    /**
     * @deprecated Need more implement
     */
    getEntity() {
        let entity = this.entity;
        if (entity)
            return entity;
        entity = {
            __unique_id__: {
                "64bit_low": this.getUniqueIdLow(),
                "64bit_high": this.getUniqueIdHigh()
            },
            __identifier__: this.identifier,
            __type__: (this.getTypeId() & 0xff) === 0x40 ? 'item_entity' : 'entity',
            id: 0, // bool ScriptApi::WORKAROUNDS::helpRegisterActor(entt::Registry<unsigned int>* registry? ,Actor* actor,unsigned int* id_out);
        };
        return this.entity = entity;
    }
    addTag(tag) {
        const _tag = new pointer_1.CxxStringWrapper(true);
        _tag.construct();
        _tag.value = tag;
        const ret = this._addTag(_tag);
        _tag.destruct();
        return ret;
    }
    hasTag(tag) {
        const _tag = new pointer_1.CxxStringWrapper(true);
        _tag.construct();
        _tag.value = tag;
        const ret = this._hasTag(_tag);
        _tag.destruct();
        return ret;
    }
    // float NativeActor::getAttribute(int attribute) noexcept
    // {
    //     if (attribute < 1) return 0;
    //     if ((uint)attribute > countof(attribNames)) return 0;
    //     AttributeInstance* attr = ptr()->getAttribute((AttributeId)attribute);
    //     if (!attr) return 0;
    //     return attr->currentValue();
    // }
    // kr::JsValue NativeActor::fromPointer(StaticPointer* ptr) throws(JsException)
    // {
    //     if (ptr == nullptr) throw JsException(u"1st argument must be *Pointer");
    //     Actor* actor = (Actor*)ptr->getAddressRaw();
    //     return fromRaw(actor);
    // }
    static fromUniqueIdBin(bin) {
        common_1.abstract();
    }
    static fromUniqueId(lowbits, highbits) {
        return Actor.fromUniqueIdBin(bin_1.bin.make64(lowbits, highbits));
    }
    static fromEntity(entity) {
        const u = entity.__unique_id__;
        return Actor.fromUniqueId(u["64bit_low"], u["64bit_high"]);
    }
    static [makefunc_1.makefunc.np2js](ptr) {
        return Actor._singletoning(ptr);
    }
    static all() {
        common_1.abstract();
    }
    static _singletoning(ptr) {
        common_1.abstract();
    }
}
exports.Actor = Actor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxrQ0FBK0I7QUFDL0Isd0NBQXVDO0FBQ3ZDLG9DQUFzRTtBQUN0RSw0Q0FBeUM7QUFDekMsa0RBQStDO0FBQy9DLGdEQUEwQztBQUMxQywwQ0FBZ0Q7QUFDaEQsMkNBQStFO0FBT2xFLFFBQUEsYUFBYSxHQUFHLG9CQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7QUFHL0MsSUFBWSxXQUlYO0FBSkQsV0FBWSxXQUFXO0lBQ25CLHVEQUFhLENBQUE7SUFDYixpREFBVSxDQUFBO0lBQ1YsaURBQVUsQ0FBQTtBQUNkLENBQUMsRUFKVyxXQUFXLEdBQVgsbUJBQVcsS0FBWCxtQkFBVyxRQUl0QjtBQUdELE1BQWEsY0FBZSxTQUFRLGtCQUFXO0NBQzlDO0FBREQsd0NBQ0M7QUFFRCxJQUFZLFNBR1g7QUFIRCxXQUFZLFNBQVM7SUFFakIsK0NBQWMsQ0FBQTtBQUNsQixDQUFDLEVBSFcsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUFHcEI7QUFFRCxNQUFhLEtBQU0sU0FBUSx5QkFBVztJQU94QixRQUFRO1FBQ2QsaUJBQVEsRUFBRSxDQUFDO0lBQ2YsQ0FBQztJQUVTLE9BQU8sQ0FBQyxHQUFvQjtRQUNsQyxpQkFBUSxFQUFFLENBQUM7SUFDZixDQUFDO0lBRVMsT0FBTyxDQUFDLEdBQW9CO1FBQ2xDLGlCQUFRLEVBQUUsQ0FBQztJQUNmLENBQUM7SUFFUyxrQkFBa0IsQ0FBQyxNQUFrQjtRQUMzQyxpQkFBUSxFQUFFLENBQUM7SUFDZixDQUFDO0lBRVMsb0JBQW9CLENBQUMsRUFBYyxFQUFFLEtBQVksRUFBRSxJQUFzQjtRQUMvRSxpQkFBUSxFQUFFLENBQUM7SUFDZixDQUFDO0lBRUQsVUFBVSxDQUFDLE1BQW9CO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQUUsTUFBTSxLQUFLLENBQUMsMEJBQTBC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