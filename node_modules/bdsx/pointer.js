"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CxxStringPointer = exports.CxxStringStructure = exports.CxxStringWrapper = exports.Pointer = exports.Wrapper = void 0;
const common_1 = require("./common");
const dll_1 = require("./dll");
const nativeclass_1 = require("./nativeclass");
const nativetype_1 = require("./nativetype");
class Wrapper extends nativeclass_1.NativeClass {
    static make(type) {
        class TypedWrapper extends Wrapper {
        }
        TypedWrapper.prototype.type = type;
        TypedWrapper.define({ value: type });
        return TypedWrapper;
    }
    static [nativetype_1.NativeType.ctor_copy](to, from) {
        to.copyFrom(from, 8);
    }
    static [nativetype_1.NativeType.ctor_move](to, from) {
        to.copyFrom(from, 8);
    }
    static [nativetype_1.NativeType.descriptor](builder, key, offset) {
        const type = this;
        let obj = null;
        function init(ptr) {
            obj = ptr.getPointerAs(type, offset);
            Object.defineProperty(ptr, key, {
                get() {
                    return obj;
                },
                set(v) {
                    obj = v;
                    ptr.setPointer(v, offset);
                }
            });
        }
        builder.desc[key] = {
            configurable: true,
            get() {
                init(this);
                return obj;
            }
        };
    }
}
exports.Wrapper = Wrapper;
/** @deprecated renamed to Wrapper<T> */
class Pointer extends Wrapper {
    static make(type) {
        class TypedPointer extends Pointer {
        }
        TypedPointer.prototype.type = type;
        TypedPointer.defineAsUnion({ p: type, value: type });
        return TypedPointer;
    }
}
exports.Pointer = Pointer;
class CxxStringWrapper extends nativeclass_1.NativeClass {
    [nativetype_1.NativeType.ctor]() {
        common_1.abstract();
    }
    [nativetype_1.NativeType.dtor]() {
        common_1.abstract();
    }
    /**
     * @deprecated use .destruct
     */
    dispose() {
        this.destruct();
    }
    get value() {
        return this.getCxxString();
    }
    set value(str) {
        this.setCxxString(str);
    }
    get valueptr() {
        if (this.capacity >= 0x10)
            return this.getPointer();
        else
            return this.add();
    }
    reserve(nsize) {
        const capacity = this.capacity;
        if (nsize > capacity) {
            const orivalue = this.valueptr;
            this.capacity = nsize;
            const dest = dll_1.dll.ucrtbase.malloc(nsize + 1);
            dest.copyFrom(orivalue, this.length);
            if (capacity >= 0x10)
                dll_1.dll.ucrtbase.free(orivalue);
            this.setPointer(dest);
            if (dest === null) {
                this.setString("[out of memory]\0");
                this.capacity = 15;
                this.length = 15;
                return;
            }
        }
    }
    resize(nsize) {
        this.reserve(nsize);
        this.length = nsize;
    }
}
exports.CxxStringWrapper = CxxStringWrapper;
CxxStringWrapper.define({
    length: [nativetype_1.int64_as_float_t, 0x10],
    capacity: [nativetype_1.int64_as_float_t, 0x18]
});
const strctor = nativetype_1.CxxString[nativetype_1.NativeType.ctor];
const strdtor = nativetype_1.CxxString[nativetype_1.NativeType.dtor];
CxxStringWrapper.prototype[nativetype_1.NativeType.ctor] = function () { return strctor(this); };
CxxStringWrapper.prototype[nativetype_1.NativeType.dtor] = function () { return strdtor(this); };
/** @deprecated renamed to CxxStringWrapper */
exports.CxxStringStructure = CxxStringWrapper;
/** @deprecated use CxxStringWrapper */
exports.CxxStringPointer = Wrapper.make(nativetype_1.CxxString);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBvaW50ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQW9DO0FBRXBDLCtCQUE0QjtBQUU1QiwrQ0FBNEM7QUFDNUMsNkNBQXNHO0FBWXRHLE1BQXNCLE9BQVcsU0FBUSx5QkFBVztJQUloRCxNQUFNLENBQUMsSUFBSSxDQUFJLElBQVk7UUFDdkIsTUFBTSxZQUFhLFNBQVEsT0FBVTtTQUdwQztRQUNELFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNuQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUMsS0FBSyxFQUFDLElBQUksRUFBQyxDQUFDLENBQUM7UUFDbEMsT0FBTyxZQUFZLENBQUM7SUFDeEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxDQUFDLHVCQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBZ0IsRUFBRSxJQUFrQjtRQUM5RCxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBQ0QsTUFBTSxDQUFDLENBQUMsdUJBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFnQixFQUFFLElBQWtCO1FBQzlELEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFDRCxNQUFNLENBQUMsQ0FBQyx1QkFBVSxDQUFDLFVBQVUsQ0FBQyxDQUEyQixPQUErQixFQUFFLEdBQVUsRUFBRSxNQUFhO1FBQy9HLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLEdBQUcsR0FBb0IsSUFBSSxDQUFDO1FBRWhDLFNBQVMsSUFBSSxDQUFDLEdBQWlCO1lBQzNCLEdBQUcsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNyQyxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7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