"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bedrockServer = void 0;
const krevent_1 = require("krevent");
const assembler_1 = require("./assembler");
const command_1 = require("./bds/command");
const commandorigin_1 = require("./bds/commandorigin");
const dimension_1 = require("./bds/dimension");
const level_1 = require("./bds/level");
const proc_1 = require("./bds/proc");
const capi_1 = require("./capi");
const command_2 = require("./command");
const common_1 = require("./common");
const core_1 = require("./core");
const dll_1 = require("./dll");
const getline_1 = require("./getline");
const makefunc_1 = require("./makefunc");
const nativetype_1 = require("./nativetype");
const nethook_1 = require("./nethook");
const pointer_1 = require("./pointer");
const sharedpointer_1 = require("./sharedpointer");
const source_map_support_1 = require("./source-map-support");
const unlocker_1 = require("./unlocker");
const util_1 = require("./util");
const windows_h_1 = require("./windows_h");
const readline = require("readline");
const colors = require("colors");
const bd_server = require("./bds/server");
const nimodule = require("./bds/networkidentifier");
const asmcode = require("./asm/asmcode");
class Liner {
    constructor() {
        this.remaining = '';
    }
    write(str) {
        const lastidx = str.lastIndexOf('\n');
        if (lastidx === -1) {
            this.remaining += str;
            return null;
        }
        else {
            const out = this.remaining + str.substr(0, lastidx);
            this.remaining = str.substr(lastidx + 1);
            return out;
        }
    }
}
const STATUS_NO_NODE_THREAD = (0xE0000001 | 0);
// default runtime error handler
core_1.runtimeError.setHandler(err => {
    source_map_support_1.remapError(err);
    const lastSender = core_1.ipfilter.getLastSender();
    console.error('[ Native Crash ]');
    console.error(`Last Sender IP: ${lastSender}`);
    console.error('[ Native Stack ]');
    switch (err.code) {
        case STATUS_NO_NODE_THREAD:
            console.error(`JS Accessing from the out of threads`);
            break;
        case windows_h_1.EXCEPTION_ACCESS_VIOLATION:
            console.error(`Accessing the invalid memory address`);
            break;
        case windows_h_1.STATUS_INVALID_PARAMETER:
            console.error(`Native function received wrong parameters`);
            break;
    }
    console.error(err.nativeStack);
    console.error('[ JS Stack ]');
    console.error(err.stack);
});
let launched = false;
const bedrockLogLiner = new Liner;
const cmdOutputLiner = new Liner;
const openEvTarget = new krevent_1.default();
const updateEvTarget = new krevent_1.default();
const errorEvTarget = new krevent_1.default();
const closeEvTarget = new krevent_1.default();
const logEvTarget = new krevent_1.default();
const commandOutputEvTarget = new krevent_1.default();
const commandQueue = new core_1.MultiThreadQueue(nativetype_1.CxxString[nativetype_1.NativeType.size]);
const commandQueueBuffer = new pointer_1.CxxStringWrapper(true);
function patchForStdio() {
    // hook bedrock log
    asmcode.bedrockLogNp = makefunc_1.makefunc.np((severity, msgptr, size) => {
        // void(*callback)(int severity, const char* msg, size_t size)
        const line = bedrockLogLiner.write(msgptr.getString(size, 0, common_1.Encoding.Utf8));
        if (line === null)
            return;
        let color;
        switch (severity) {
            case 1:
                color = colors.white;
                break;
            case 2:
                color = colors.brightWhite;
                break;
            case 4:
                color = colors.brightYellow;
                break;
            default:
                color = colors.brightRed;
                break;
        }
        if (logEvTarget.fire(line, color) === common_1.CANCEL)
            return;
        console.log(color(line));
    }, makefunc_1.RawTypeId.Void, null, makefunc_1.RawTypeId.Int32, core_1.StaticPointer, makefunc_1.RawTypeId.FloatAsInt64);
    proc_1.procHacker.write('BedrockLogOut', 0, assembler_1.asm().jmp64(asmcode.logHook, assembler_1.Register.rax));
    asmcode.CommandOutputSenderHookCallback = makefunc_1.makefunc.np((bytes, ptr) => {
        // void(*callback)(const char* log, size_t size)
        const line = cmdOutputLiner.write(ptr.getString(bytes));
        if (line === null)
            return;
        if (commandOutputEvTarget.fire(line) !== common_1.CANCEL) {
            console.log(line);
        }
    }, makefunc_1.RawTypeId.Void, null, makefunc_1.RawTypeId.FloatAsInt64, core_1.StaticPointer);
    proc_1.procHacker.patching('hook-command-output', 'CommandOutputSender::send', 0x217, asmcode.CommandOutputSenderHook, assembler_1.Register.rax, true, [
        0xE8, 0xFF, 0xFF, 0xFF, 0xFF,
        0x48, 0x8D, 0x15, 0xFF, 0xFF, 0xFF, 0xFF,
        0x48, 0x8B, 0xC8,
        0xFF, 0x15, 0xFF, 0xFF, 0xFF, 0xFF, // call qword ptr ds:[<&??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z>]
    ], [1, 5, 8, 12, 17, 21]);
    // hook stdin
    asmcode.commandQueue = commandQueue;
    asmcode.MultiThreadQueueTryDequeue = core_1.MultiThreadQueue.tryDequeue;
    proc_1.procHacker.patching('hook-stdin-command', 'ConsoleInputReader::getLine', 0, asmcode.ConsoleInputReader_getLine_hook, assembler_1.Register.rax, false, [
        0xE9, 0x3B, 0xF6, 0xFF, 0xFF,
        0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC // int3 ...
    ], [3, 7, 21, 25, 38, 42]);
    // remove original stdin thread
    const justReturn = assembler_1.asm().ret();
    proc_1.procHacker.write('ConsoleInputReader::ConsoleInputReader', 0, justReturn);
    proc_1.procHacker.write('ConsoleInputReader::~ConsoleInputReader', 0, justReturn);
    proc_1.procHacker.write('ConsoleInputReader::unblockReading', 0, justReturn);
}
function _launch(asyncResolve) {
    core_1.ipfilter.init(ip => {
        console.error(`[BDSX] traffic overed: ${ip}`);
    });
    core_1.jshook.init(err => {
        if (err instanceof Error) {
            err.stack = source_map_support_1.remapStack(err.stack);
            if (errorEvTarget.fire(err) !== common_1.CANCEL) {
                console.error(err.stack);
            }
        }
        else {
            console.error(err);
        }
    });
    asmcode.evWaitGameThreadEnd = dll_1.dll.kernel32.CreateEventW(null, 0, 0, null);
    core_1.uv_async.open();
    // uv async callback, when BDS closed perfectly
    function finishCallback() {
        core_1.uv_async.close();
        threadHandle.close();
        closeEvTarget.fire();
        util_1._tickCallback();
    }
    // // call game thread entry
    asmcode.gameThreadInner = proc_1.proc['<lambda_8914ed82e3ef519cb2a85824fbe333d8>::operator()'];
    asmcode.free = dll_1.dll.ucrtbase.free.pointer;
    asmcode.SetEvent = dll_1.dll.kernel32.SetEvent.pointer;
    // hook game thread
    asmcode.uv_async_call = core_1.uv_async.call;
    asmcode.WaitForSingleObject = dll_1.dll.kernel32.WaitForSingleObject.pointer;
    asmcode._Cnd_do_broadcast_at_thread_exit = dll_1.dll.msvcp140._Cnd_do_broadcast_at_thread_exit;
    proc_1.procHacker.patching('hook-game-thread', 'std::thread::_Invoke<std::tuple<<lambda_8914ed82e3ef519cb2a85824fbe333d8> >,0>', 6, asmcode.gameThreadHook, // original depended
    assembler_1.Register.rax, true, [
        0x48, 0x8B, 0xD9,
        0xE8, 0xF2, 0x56, 0x01, 0x00,
        0xE8, 0xF8, 0x3B, 0xB5, 0x00, // call <bedrock_server._Cnd_do_broadcast_at_thread_exit>
    ], []);
    // 1.16.210.05 - no google breakpad now
    // hook runtime error
    // procHacker.jumping('hook-runtime-error', 'google_breakpad::ExceptionHandler::HandleException', 0, asmcode.runtime_error, Register.rax, [
    //     0x48, 0x89, 0x5C, 0x24, 0x08,   // mov qword ptr ss:[rsp+8],rbx
    //     0x57,                           // push rdi
    //     0x48, 0x83, 0xEC, 0x20,         // sub rsp,20
    //     0x48, 0x8B, 0xF9,               // mov rdi,rcx
    // ], []);
    // procHacker.jumping('hook-invalid-parameter', 'google_breakpad::ExceptionHandler::HandleInvalidParameter', 0, asmcode.handle_invalid_parameter, Register.rax, [
    //     0x40, 0x55, // push rbp
    //     0x41, 0x54, // push r12
    //     0x41, 0x55, // push r13
    //     0x41, 0x56, // push r14
    //     0x41, 0x57, // push r15
    //     0x48, 0x8D, 0xAC, 0x24, 0x00, 0xF8, 0xFF, 0xFF, // lea rbp,qword ptr ss:[rsp-800]
    // ], []);
    // get server instance
    proc_1.procHacker.hookingRawWithCallOriginal('ServerInstance::ServerInstance', asmcode.ServerInstance_ctor_hook, [assembler_1.Register.rcx, assembler_1.Register.rdx, assembler_1.Register.r8], []);
    // it removes errors when run commands on shutdown.
    proc_1.procHacker.nopping('skip-command-list-destruction', 'ScriptEngine::~ScriptEngine', 0x7d, [
        0x48, 0x8D, 0x4B, 0x78,
        0xE8, 0x6A, 0xF5, 0xFF, 0xFF // call <bedrock_server.public: __cdecl std::deque<struct ScriptCommand,class std::allocator<struct ScriptCommand> >::~deque<struct ScriptCommand,class std::allocator<struct ScriptCommand> >(void) __ptr64>
    ], [5, 9]);
    // enable script
    proc_1.procHacker.nopping('force-enable-script', 'MinecraftServerScriptEngine::onServerThreadStarted', 0x38, [
        0xE8, 0x43, 0x61, 0xB1, 0xFF,
        0x84, 0xC0,
        0x0F, 0x84, 0x4E, 0x01, 0x00, 0x00,
        0x48, 0x8B, 0x17,
        0x48, 0x8B, 0xCF,
        0xFF, 0x92, 0x70, 0x04, 0x00, 0x00,
        0x48, 0x8B, 0xC8,
        0xE8, 0xE7, 0x28, 0x15, 0x00,
        0x48, 0x8B, 0xC8,
        0xE8, 0x4F, 0x66, 0x19, 0x00,
        0x84, 0xC0,
        0x0F, 0x84, 0x2A, 0x01, 0x00, 0x00 // je bedrock_server.7FF7345226F3
    ], [1, 5, 16, 20, 28, 32]);
    patchForStdio();
    require('./bds/implements');
    // seh wrapped main
    asmcode.bedrock_server_exe_args = core_1.bedrock_server_exe.args;
    asmcode.bedrock_server_exe_argc = core_1.bedrock_server_exe.argc;
    asmcode.bedrock_server_exe_main = core_1.bedrock_server_exe.main;
    asmcode.finishCallback = makefunc_1.makefunc.np(finishCallback, makefunc_1.RawTypeId.Void, null);
    {
        // restore main
        const unlock = new unlocker_1.MemoryUnlocker(core_1.bedrock_server_exe.main, 12);
        core_1.bedrock_server_exe.main.add().copyFrom(core_1.bedrock_server_exe.mainOriginal12Bytes, 12);
        unlock.done();
    }
    // call main as a new thread
    // main will create a game thread.
    // and bdsx will hijack the game thread and run it on the node thread.
    const [threadHandle] = capi_1.capi.createThread(asmcode.wrapped_main, null);
    // skip to create the console of BDS
    proc_1.procHacker.write('ScriptApi::ScriptFramework::registerConsole', 0, assembler_1.asm().mov_r_c(assembler_1.Register.rax, 1).ret());
    // hook on update
    asmcode.cgateNodeLoop = core_1.cgate.nodeLoop;
    asmcode.updateEvTargetFire = makefunc_1.makefunc.np(() => updateEvTarget.fire(), makefunc_1.RawTypeId.Void, null);
    proc_1.procHacker.patching('update-hook', '<lambda_8914ed82e3ef519cb2a85824fbe333d8>::operator()', 0x5f3, asmcode.updateWithSleep, assembler_1.Register.rcx, true, [
        0xE8, 0x3D, 0xDF, 0xB3, 0x00,
        0x48, 0x8B, 0xD8,
        0xE8, 0x2F, 0xDF, 0xB3, 0x00,
        0x48, 0x99,
        0x48, 0xF7, 0xFB,
        0x48, 0x69, 0xC8, 0x00, 0xCA, 0x9A, 0x3B,
        0x48, 0x69, 0xC2, 0x00, 0xCA, 0x9A, 0x3B,
        0x48, 0x99,
        0x48, 0xF7, 0xFB,
        0x48, 0x03, 0xC8,
        0x48, 0x8B, 0x44, 0x24, 0x20,
        0x48, 0x2B, 0xC1,
        0x48, 0x3D, 0x88, 0x13, 0x00, 0x00,
        0x7C, 0x0B,
        0x48, 0x8D, 0x4C, 0x24, 0x20,
        0xE8, 0x4B, 0xAA, 0xC6, 0xFF,
        0x90, // nop
    ], []);
    nethook_1.nethook.hooking(err => {
        err.stack = source_map_support_1.remapStack(err.stack);
        if (errorEvTarget.fire(err) !== common_1.CANCEL) {
            console.error(err.stack);
        }
    });
    command_2.hookingForCommand();
    // hook on script starting
    proc_1.procHacker.hookingRawWithCallOriginal('ScriptEngine::startScriptLoading', makefunc_1.makefunc.np((scriptEngine) => {
        try {
            core_1.cgate.nodeLoopOnce();
            bd_server.serverInstance = asmcode.serverInstance.as(bd_server.ServerInstance);
            nimodule.networkHandler = bd_server.serverInstance.networkHandler;
            openEvTarget.fire();
            asyncResolve();
            util_1._tickCallback();
            proc_1.procHacker.js('ScriptEngine::_processSystemInitialize', makefunc_1.RawTypeId.Void, null, core_1.VoidPointer)(scriptEngine);
            util_1._tickCallback();
            core_1.cgate.nodeLoopOnce();
        }
        catch (err) {
            source_map_support_1.remapAndPrintError(err);
        }
    }, makefunc_1.RawTypeId.Void, null, core_1.VoidPointer), [assembler_1.Register.rcx], []);
    // keep ScriptEngine variables. idk why it needs.
    proc_1.procHacker.write('MinecraftServerScriptEngine::onServerUpdateEnd', 0, assembler_1.asm().ret());
}
const stopfunc = proc_1.procHacker.js('DedicatedServer::stop', makefunc_1.RawTypeId.Void, null, core_1.VoidPointer);
const commandVersion = proc_1.proc['CommandVersion::CurrentVersion'].getInt32();
const commandContextRefCounterVftable = proc_1.proc["std::_Ref_count_obj2<CommandContext>::`vftable'"];
const CommandOriginWrapper = pointer_1.Wrapper.make(commandorigin_1.CommandOrigin.ref());
const commandContextConstructor = proc_1.procHacker.js('CommandContext::CommandContext', makefunc_1.RawTypeId.Void, null, command_1.CommandContext, pointer_1.CxxStringWrapper, CommandOriginWrapper, makefunc_1.RawTypeId.Int32);
const CommandContextPtr = sharedpointer_1.SharedPtr.make(command_1.CommandContext);
function createCommandContext(command, commandOrigin) {
    const sharedptr = new CommandContextPtr(true);
    sharedptr.create(commandContextRefCounterVftable);
    commandContextConstructor(sharedptr.p, command, commandOrigin, commandVersion);
    return sharedptr;
}
const serverCommandOriginConstructor = proc_1.procHacker.js('ServerCommandOrigin::ServerCommandOrigin', makefunc_1.RawTypeId.Void, null, commandorigin_1.ServerCommandOrigin, pointer_1.CxxStringWrapper, level_1.ServerLevel, makefunc_1.RawTypeId.Int32, dimension_1.Dimension);
function createServerCommandOrigin(name, level, permissionLevel, dimension) {
    const wrapper = new CommandOriginWrapper(true);
    const origin = capi_1.capi.malloc(commandorigin_1.ServerCommandOrigin[nativetype_1.NativeType.size]).as(commandorigin_1.ServerCommandOrigin);
    wrapper.value = origin;
    serverCommandOriginConstructor(origin, name, level, permissionLevel, dimension);
    return wrapper;
}
const deleteServerCommandOrigin = makefunc_1.makefunc.js([0, 0], makefunc_1.RawTypeId.Void, { this: commandorigin_1.ServerCommandOrigin }, makefunc_1.RawTypeId.Int32);
commandorigin_1.ServerCommandOrigin[nativetype_1.NativeType.dtor] = () => deleteServerCommandOrigin.call(this, 1);
function sessionIdGrabber(text) {
    const tmp = text.match(/\[\d{4}-\d\d-\d\d \d\d:\d\d:\d\d INFO\] Session ID (.*)$/);
    if (tmp) {
        bedrockServer.sessionId = tmp[1];
        logEvTarget.remove(sessionIdGrabber);
    }
}
logEvTarget.on(sessionIdGrabber);
var bedrockServer;
(function (bedrockServer) {
    /**
     * after BDS launched
     */
    bedrockServer.open = openEvTarget;
    /**
     * after BDS closed
     */
    bedrockServer.close = closeEvTarget;
    bedrockServer.update = updateEvTarget;
    /**
    * global error listeners
    * if returns CANCEL, then default error printing is disabled
    */
    bedrockServer.error = errorEvTarget;
    bedrockServer.bedrockLog = logEvTarget;
    bedrockServer.commandOutput = commandOutputEvTarget;
    /**
     * stop the BDS
     * It will stop next tick
     */
    function stop() {
        const server = bd_server.serverInstance.server;
        stopfunc(server.add(8));
    }
    bedrockServer.stop = stop;
    function forceKill(exitCode) {
        core_1.bedrock_server_exe.forceKill(exitCode);
    }
    bedrockServer.forceKill = forceKill;
    function launch() {
        return new Promise((resolve, reject) => {
            if (launched) {
                reject(source_map_support_1.remapError(Error('Cannot launch BDS again')));
                return;
            }
            launched = true;
            _launch(resolve);
        });
    }
    bedrockServer.launch = launch;
    /**
     * pass to stdin
     */
    function executeCommandOnConsole(command) {
        commandQueueBuffer.construct();
        commandQueueBuffer.value = command;
        commandQueue.enqueue(commandQueueBuffer);
    }
    bedrockServer.executeCommandOnConsole = executeCommandOnConsole;
    /**
     * it does the same thing with executeCommandOnConsole
     * but call the internal function directly
     */
    function executeCommand(command, permissionLevel = 4, dimension = null) {
        const str = new pointer_1.CxxStringWrapper(true);
        str.construct();
        str.value = 'Server';
        const origin = createServerCommandOrigin(str, bd_server.serverInstance.minecraft.getLevel(), // I'm not sure it's always ServerLevel
        permissionLevel, dimension);
        str.value = command;
        const ctx = createCommandContext(str, origin);
        const res = bd_server.serverInstance.minecraft.commands.executeCommand(ctx, false);
        ctx.destruct();
        origin.destruct();
        str.destruct();
        return res;
    }
    bedrockServer.executeCommand = executeCommand;
    let stdInHandler = null;
    class DefaultStdInHandler {
        constructor() {
            this.online = executeCommandOnConsole;
            this.onclose = () => {
                this.close();
            };
            // empty
        }
        static install() {
            if (stdInHandler !== null)
                throw source_map_support_1.remapError(Error('Already opened'));
            return stdInHandler = new DefaultStdInHandlerGetLine;
        }
    }
    bedrockServer.DefaultStdInHandler = DefaultStdInHandler;
    /**
     * this handler has bugs on Linux+Wine
     */
    class DefaultStdInHandlerJs extends DefaultStdInHandler {
        constructor() {
            super();
            this.rl = readline.createInterface({
                input: process.stdin,
                output: process.stdout
            });
            this.rl.on('line', line => this.online(line));
            bedrockServer.close.on(this.onclose);
        }
        close() {
            if (stdInHandler === null)
                return;
            console.assert(stdInHandler !== null);
            stdInHandler = null;
            this.rl.close();
            this.rl.removeAllListeners();
            bedrockServer.close.remove(this.onclose);
        }
    }
    class DefaultStdInHandlerGetLine extends DefaultStdInHandler {
        constructor() {
            super();
            this.getline = new getline_1.GetLine(line => this.online(line));
            bedrockServer.close.on(this.onclose);
        }
        close() {
            if (stdInHandler === null)
                return;
            console.assert(stdInHandler !== null);
            stdInHandler = null;
            this.getline.close();
        }
    }
})(bedrockServer = exports.bedrockServer || (exports.bedrockServer = {}));
//# sourceMappingURL=data:application/json;base64,