"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.eminus_load_dlls_in_mods = void 0;
const core_1 = require("bdsx/core");
const dll_1 = require("bdsx/dll");
const util_1 = require("bdsx/util");
const windows_h_1 = require("bdsx/windows_h");
const dllchecker_1 = require("./dllchecker");
const fs = require("fs");
const colors = require("colors");
const common_1 = require("bdsx/common");
function getErrorMessage(errcode) {
    const bufferptr = new core_1.AllocatedPointer(8);
    const charlen = dll_1.dll.kernel32.FormatMessageW(windows_h_1.FORMAT_MESSAGE_ALLOCATE_BUFFER | windows_h_1.FORMAT_MESSAGE_FROM_SYSTEM, null, errcode, windows_h_1.MAKELANGID(windows_h_1.LANG_NEUTRAL, windows_h_1.SUBLANG_DEFAULT), bufferptr, 0, null);
    const strptr = bufferptr.getPointer();
    const message = strptr.getString(charlen, 0, common_1.Encoding.Utf16);
    dll_1.dll.kernel32.LocalFree(strptr);
    return message.trim();
}
function printErrorCode(err) {
    console.error(colors.red(`Error Code: ${err}`));
    console.error(colors.red('Error Message: ' + getErrorMessage(err)));
}
function loadEminus() {
    try {
        return fs.readFileSync('mods/eminus.ini', 'utf-8');
    }
    catch (err) {
        return null;
    }
}
var IniSection;
(function (IniSection) {
    IniSection[IniSection["Global"] = 0] = "Global";
    IniSection[IniSection["Module"] = 1] = "Module";
})(IniSection || (IniSection = {}));
/**
 * @deprecated use NativeModule.load
 */
function eminus_load_dlls_in_mods() {
    const modules = [];
    let verbose = true;
    const ini = loadEminus();
    if (ini !== null) {
        let section = IniSection.Global;
        let linenum = 0;
        for (let line of ini.split('\n')) {
            line = line.split('#', 1)[0].trim();
            linenum++;
            if (line === '') {
                // empty
                continue;
            }
            // section
            if (line[0] === '[') {
                let offset = 0;
                offset++;
                let sectionend = line.indexOf(']', offset);
                if (sectionend !== -1) {
                    line = line.substr(0, sectionend);
                    sectionend -= offset;
                }
                else {
                    sectionend = line.length - offset;
                }
                const sectionName = line.substring(offset, sectionend);
                switch (sectionName) {
                    case 'module':
                        section = IniSection.Module;
                        break;
                    case 'global':
                        section = IniSection.Global;
                        break;
                    default:
                        console.error(`[EMinus] eminus.ini(${linenum}): - unknown section ${line.substr(offset, sectionend)}`);
                        break;
                }
                continue;
            }
            // find equal
            const equal = line.indexOf('=');
            if (equal !== -1) {
                const name = line.substr(0, equal).trimRight();
                const value = line.substr(equal + 1).trimLeft();
                switch (section) {
                    case IniSection.Global:
                        if (name === 'verbose') {
                            verbose = !!+value;
                            continue;
                        }
                        break;
                }
                console.error(`"[EMinus] eminus.ini(${linenum}): - unknown property ${name}`);
            }
            else {
                // name only
                switch (section) {
                    case IniSection.Module:
                        modules.push(line);
                        break;
                    default:
                        console.error(`[EMinus] eminus.ini(${linenum}): - unknown property ${line}`);
                        break;
                }
            }
        }
    }
    else {
        if (!util_1.isDirectory('mods')) {
            console.error('[EMinus] no mods directory, skip');
            return;
        }
        console.error('[EMinus] no mods\\eminus.ini, It will load mods\\*.dll');
        modules.push(...fs.readdirSync('./mods'));
    }
    console.log(colors.red('[EMinus] Element Minus is deprecated. Please use NativeModule.load directly'));
    if (verbose)
        console.log('[EMinus] JS-Version');
    dll_1.dll.kernel32.SetDllDirectoryW('mods');
    for (const name of modules) {
        try {
            dll_1.NativeModule.get(name);
            if (verbose)
                console.log(`[EMinus] mods\\${name} (Already loaded)`);
            continue;
        }
        catch (err) {
        }
        if (verbose)
            console.log(`[EMinus] mods\\${name}`);
        try {
            dll_1.NativeModule.load(name);
            continue;
        }
        catch (err) {
            console.error(`[EMinus] mods\\${name}: ${colors.red('Failed')}`);
            if (err.errno) {
                printErrorCode(err.errno);
                if (err.errno === windows_h_1.ERROR_MOD_NOT_FOUND) {
                    dllchecker_1.dllchecker.check(name);
                }
                process.exit(windows_h_1.ERROR_MOD_NOT_FOUND);
            }
            else {
                throw err;
            }
        }
    }
}
exports.eminus_load_dlls_in_mods = eminus_load_dlls_in_mods;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxvQ0FBNkM7QUFDN0Msa0NBQTZDO0FBQzdDLG9DQUF3QztBQUN4Qyw4Q0FBNEo7QUFDNUosNkNBQTBDO0FBQzFDLHlCQUEwQjtBQUMxQixpQ0FBa0M7QUFDbEMsd0NBQXVDO0FBRXZDLFNBQVMsZUFBZSxDQUFDLE9BQWM7SUFDbkMsTUFBTSxTQUFTLEdBQUcsSUFBSSx1QkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxNQUFNLE9BQU8sR0FBRyxTQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQywwQ0FBOEIsR0FBRyxzQ0FBMEIsRUFBRSxJQUFJLEVBQ3pHLE9BQU8sRUFBRSxzQkFBVSxDQUFDLHdCQUFZLEVBQUUsMkJBQWUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFNUUsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3RDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxpQkFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdELFNBQUcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLE9BQU8sT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzFCLENBQUM7QUFDRCxTQUFTLGNBQWMsQ0FBQyxHQUFVO0lBQzlCLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNoRCxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEdBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0RSxDQUFDO0FBRUQsU0FBUyxVQUFVO0lB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