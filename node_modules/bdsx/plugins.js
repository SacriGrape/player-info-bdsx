"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadAllPlugins = void 0;
const fs_1 = require("fs");
const path = require("path");
const colors = require("colors");
const source_map_support_1 = require("./source-map-support");
const concurrency_1 = require("./concurrency");
class PromCounter {
    constructor() {
        this.resolve = null;
        this.counter = 0;
        this.prom = Promise.resolve();
    }
    ref() {
        if (this.counter === 0) {
            this.prom = new Promise(resolve => {
                this.resolve = resolve;
            });
        }
        this.counter++;
    }
    unref() {
        this.counter--;
        if (this.counter === 0) {
            this.resolve();
            this.resolve = null;
        }
    }
    wait() {
        return this.prom;
    }
}
async function loadAllPlugins() {
    const taskQueue = new concurrency_1.ConcurrencyQueue;
    const loaded = new Set();
    async function loadPackageJson(name, json) {
        if (!json) {
            console.error(`[BDSX-Plugins] Invalid ${name}/package.json`);
            return false;
        }
        if (!json.dependencies)
            return true;
        const counter = new PromCounter;
        for (const name in json.dependencies) {
            if (!name.startsWith('@bdsx/'))
                continue;
            if (loaded.has(name))
                continue;
            loaded.add(name);
            counter.ref();
            taskQueue.run(async () => {
                try {
                    const jsonpath = require.resolve(name + '/package.json');
                    const json = JSON.parse(await fs_1.promises.readFile(jsonpath, 'utf-8'));
                    if (json.bdsxPlugin) {
                        await loadPackageJson(name, json);
                    }
                }
                catch (err) {
                    console.error(`[BDSX-Plugins] Failed to get ${name}/package.json`);
                }
                counter.unref();
            });
        }
        await counter.wait();
        return true;
    }
    try {
        const packagejson = path.resolve(process.cwd(), process.argv[1], 'package.json');
        const mainjson = JSON.parse(await fs_1.promises.readFile(packagejson, 'utf-8'));
        loadPackageJson('[entrypoint]', mainjson);
        await taskQueue.onceEnd();
        if (loaded.size === 0) {
            console.log('[BDSX-Plugins] No Plugins');
        }
        else {
            let index = 0;
            for (const name of loaded) {
                try {
                    console.log(`[BDSX-Plugins] (${++index}/${loaded.size}) ${name}`);
                    require(name);
                }
                catch (err) {
                    console.error(`[BDSX-Plugins] Failed to load ${name}`);
                    console.error(source_map_support_1.remapStack(err.stack));
                }
            }
        }
    }
    catch (err) {
        console.error(colors.red(`[BDSX-Plugins] Failed to load`));
        if (err.code === 'ENOENT') {
            console.error(colors.red(`[BDSX-Plugins] package.json not found. please set the entry point as package.json directory`));
        }
        else {
            console.error(colors.red(`[BDSX-Plugins] Failed to read package.json. ` + err.message));
        }
        return;
    }
}
exports.loadAllPlugins = loadAllPlugins;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2lucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBsdWdpbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsMkJBQW1DO0FBQ25DLDZCQUE4QjtBQUM5QixpQ0FBa0M7QUFDbEMsNkRBQWtEO0FBQ2xELCtDQUFpRDtBQUVqRCxNQUFNLFdBQVc7SUFBakI7UUFDWSxZQUFPLEdBQW1CLElBQUksQ0FBQztRQUMvQixZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ1osU0FBSSxHQUFpQixPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFzQm5ELENBQUM7SUFwQkcsR0FBRztRQUNDLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxDQUFDLEVBQUU7WUFDcEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLE9BQU8sQ0FBTyxPQUFPLENBQUEsRUFBRTtnQkFDbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7WUFDM0IsQ0FBQyxDQUFDLENBQUM7U0FDTjtRQUNELElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxPQUFPLEVBQUcsQ0FBQztRQUNoQixJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxPQUFRLEVBQUUsQ0FBQztZQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUN2QjtJQUNMLENBQUM7SUFFRCxJQUFJO1FBQ0EsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7Q0FDSjtBQUVNLEtBQUssVUFBVSxjQUFjO0lBQ2hDLE1BQU0sU0FBUyxHQUFHLElBQUksOEJBQWdCLENBQUM7SUFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztJQUNqQyxLQUFLLFVBQVUsZUFBZSxDQUFDLElBQVcsRUFBRSxJQUFRO1FBQ2hELElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDUCxPQUFPLENB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