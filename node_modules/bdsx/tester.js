"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tester = void 0;
const source_map_support_1 = require("./source-map-support");
const util_1 = require("./util");
const colors = require("colors");
let passed = 0;
let testnum = 1;
let testcount = 0;
class Tester {
    constructor() {
        this.subject = '';
        this.errored = false;
        this.done = false;
    }
    log(message) {
        console.log(`[test/${this.subject}] ${message}`);
    }
    _error(message, errorpos) {
        console.error(colors.red(`[test/${this.subject}] failed. ${message}`));
        console.error(colors.red(errorpos));
        if (!this.errored) {
            if (this.done) {
                passed--;
                console.error(colors.red(`[test] FAILED (${passed}/${testcount})`));
            }
            this.errored = true;
            Tester.errored = true;
        }
    }
    error(message, stackidx = 2) {
        const stack = Error().stack;
        this._error(message, source_map_support_1.remapStackLine(util_1.getLineAt(stack, stackidx)).stackLine);
    }
    processError(err) {
        const stack = (source_map_support_1.remapError(err).stack || '').split('\n');
        this._error(err.message, stack[1]);
        console.error(stack.slice(2).join('\n'));
    }
    fail() {
        this.error('', 3);
    }
    assert(cond, message) {
        if (!cond)
            this.error(message, 3);
    }
    static async test(tests) {
        await new Promise(resolve => setTimeout(resolve, 100)); // run after examples
        // pass one tick, wait until result of the list command example
        {
            const system = server.registerSystem(0, 0);
            await new Promise(resolve => {
                system.update = () => {
                    resolve();
                    system.update = undefined;
                };
            });
        }
        console.log(`[test] node: ${process.versions.node}`);
        console.log('[test] engine: ' + process.jsEngine + '@' + process.versions[process.jsEngine]);
        const testlist = Object.entries(tests);
        testcount += testlist.length;
        for (const [subject, test] of testlist) {
            const tester = new Tester;
            try {
                console.log(`[test] (${testnum++}/${testcount}) ${subject}`);
                tester.subject = subject;
                tester.errored = false;
                await test.call(tester);
                if (!tester.errored)
                    passed++;
                tester.done = true;
            }
            catch (err) {
                tester.processError(err);
            }
        }
        if (passed !== testcount) {
            console.error(colors.red(`[test] FAILED (${passed}/${testcount})`));
        }
        else {
            console.log(`[test] PASSED (${passed}/${testcount})`);
        }
    }
}
exports.Tester = Tester;
Tester.errored = false;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDZEQUFrRTtBQUNsRSxpQ0FBbUM7QUFDbkMsaUNBQWtDO0FBRWxDLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztBQUNmLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQztBQUNoQixJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFFbEIsTUFBYSxNQUFNO0lBQW5CO1FBQ0ksWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUNiLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFDaEIsU0FBSSxHQUFHLEtBQUssQ0FBQztJQStFakIsQ0FBQztJQTNFRyxHQUFHLENBQUMsT0FBYztRQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxJQUFJLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVPLE1BQU0sQ0FBQyxPQUFjLEVBQUUsUUFBZTtRQUMxQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxJQUFJLENBQUMsT0FBTyxhQUFhLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN2RSxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNmLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDWCxNQUFNLEVBQUUsQ0FBQztnQkFDVCxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLE1BQU0sSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDdkU7WUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUNwQixNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUN6QjtJQUNMLENBQUM7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