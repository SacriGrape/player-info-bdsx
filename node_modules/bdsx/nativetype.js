"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bin128_t = exports.bin64_t = exports.CxxString = exports.float64_t = exports.float32_t = exports.int64_as_float_t = exports.int32_t = exports.int16_t = exports.int8_t = exports.uint64_as_float_t = exports.uint32_t = exports.uint16_t = exports.uint8_t = exports.bool_t = exports.NativeType = exports.NativeDescriptorBuilder = void 0;
const symbols_1 = require("./bds/symbols");
const common_1 = require("./common");
const core_1 = require("./core");
const makefunc_1 = require("./makefunc");
const singleton_1 = require("./singleton");
var NativeTypeFn;
(function (NativeTypeFn) {
    NativeTypeFn.size = Symbol('size');
    NativeTypeFn.align = Symbol('align');
    NativeTypeFn.getter = Symbol('getter');
    NativeTypeFn.setter = Symbol('setter');
    NativeTypeFn.ctor = Symbol('ctor');
    NativeTypeFn.dtor = Symbol('dtor');
    NativeTypeFn.ctor_copy = Symbol('ctor_copy');
    NativeTypeFn.ctor_move = Symbol('ctor_move');
    NativeTypeFn.isNativeClass = Symbol('isNativeClass');
    NativeTypeFn.descriptor = Symbol('descriptor');
})(NativeTypeFn || (NativeTypeFn = {}));
function defaultCopy(size) {
    return (to, from) => {
        to.copyFrom(from, size);
    };
}
class NativeDescriptorBuilder {
    constructor() {
        this.desc = {};
        this.types = [];
        this.ctor = new NativeDescriptorBuilder.UseContextCtor;
        this.dtor = new NativeDescriptorBuilder.UseContextDtor;
        this.ctor_copy = new NativeDescriptorBuilder.UseContextCtorCopy;
    }
}
exports.NativeDescriptorBuilder = NativeDescriptorBuilder;
(function (NativeDescriptorBuilder) {
    class UseContext {
        constructor() {
            this.code = '';
            this._use = false;
            this.offset = 0;
        }
        setPtrOffset(offset) {
            if (!this._use) {
                this._use = true;
                this.initUse();
            }
            const delta = offset - this.offset;
            if (delta !== 0)
                this.code += `ptr.move(${delta});\n`;
            this.offset = offset;
        }
    }
    NativeDescriptorBuilder.UseContext = UseContext;
    class UseContextCtor extends UseContext {
        initUse() {
            this.code += `const ptr = this.add();\n`;
        }
    }
    NativeDescriptorBuilder.UseContextCtor = UseContextCtor;
    class UseContextDtor extends UseContext {
        initUse() {
            this.code += `const ptr = this.add();\n`;
        }
    }
    NativeDescriptorBuilder.UseContextDtor = UseContextDtor;
    class UseContextCtorCopy extends UseContext {
        setPtrOffset(offset) {
            if (!this._use) {
                this._use = true;
                this.initUse();
            }
            const delta = offset - this.offset;
            if (delta !== 0)
                this.code += `ptr.move(${delta});\noptr.move(${delta});\n`;
            this.offset = offset;
        }
        initUse() {
            this.code += `const ptr = this.add();\nconst optr = o.add();\n`;
        }
    }
    NativeDescriptorBuilder.UseContextCtorCopy = UseContextCtorCopy;
})(NativeDescriptorBuilder = exports.NativeDescriptorBuilder || (exports.NativeDescriptorBuilder = {}));
class NativeType {
    constructor(size, align, get, set, ctor = common_1.emptyFunc, dtor = common_1.emptyFunc, ctor_copy = defaultCopy(size), ctor_move = ctor_copy) {
        this[NativeType.size] = size;
        this[NativeType.align] = align;
        this[NativeType.getter] = get;
        this[NativeType.setter] = set;
        this[NativeType.ctor] = ctor;
        this[NativeType.dtor] = dtor;
        this[NativeType.ctor_copy] = ctor_copy;
        this[NativeType.ctor_move] = ctor_move;
    }
    extends(fields) {
        const type = this;
        const ntype = new NativeType(type[NativeType.size], type[NativeType.align], (ptr, offset) => type[NativeType.getter](ptr, offset), (ptr, v, offset) => type[NativeType.setter](ptr, v, offset));
        if (fields) {
            for (const field in fields) {
                ntype[field] = fields[field];
            }
        }
        return ntype;
    }
    ref() {
        return refSingleton.newInstance(this, () => makeReference(this));
    }
    [(NativeTypeFn.getter, NativeTypeFn.setter, NativeTypeFn.ctor, NativeTypeFn.dtor, NativeTypeFn.ctor_move, NativeTypeFn.ctor_copy, NativeTypeFn.size, NativeTypeFn.align, NativeTypeFn.descriptor)](builder, key, offset) {
        common_1.abstract();
    }
    static defaultDescriptor(builder, key, offset) {
        const type = this;
        builder.desc[key] = {
            get() { return type[NativeType.getter](this, offset); },
            set(value) { return type[NativeType.setter](this, value, offset); }
        };
        const typeidx = builder.types.push(type) - 1;
        if (type[NativeType.ctor] !== common_1.emptyFunc) {
            builder.ctor.setPtrOffset(offset);
            builder.ctor.code += `types[${typeidx}][NativeType.ctor](ptr);\n`;
        }
        if (type[NativeType.dtor] !== common_1.emptyFunc) {
            builder.dtor.setPtrOffset(offset);
            builder.dtor.code += `types[${typeidx}][NativeType.dtor](ptr);\n`;
        }
        builder.ctor_copy.setPtrOffset(offset);
        builder.ctor_copy.code += `types[${typeidx}][NativeType.ctor_copy](ptr, optr);\n`;
    }
}
exports.NativeType = NativeType;
NativeType.getter = NativeTypeFn.getter;
NativeType.setter = NativeTypeFn.setter;
NativeType.ctor = NativeTypeFn.ctor;
NativeType.dtor = NativeTypeFn.dtor;
NativeType.ctor_copy = NativeTypeFn.ctor_copy;
NativeType.ctor_move = NativeTypeFn.ctor_move;
NativeType.size = NativeTypeFn.size;
NativeType.align = NativeTypeFn.align;
NativeType.descriptor = NativeTypeFn.descriptor;
NativeType.prototype[NativeTypeFn.descriptor] = NativeType.defaultDescriptor;
const refSingleton = new singleton_1.Singleton();
function makeReference(type) {
    return new NativeType(8, 8, (ptr) => type[NativeType.getter](ptr.getPointer()), (ptr, v) => type[NativeType.setter](ptr.getPointer(), v));
}
core_1.VoidPointer[NativeType.size] = 8;
core_1.VoidPointer[NativeType.align] = 8;
core_1.VoidPointer[NativeType.getter] = function (ptr, offset) {
    return ptr.getPointerAs(this, offset);
};
core_1.VoidPointer[NativeType.setter] = function (ptr, value, offset) {
    ptr.setPointer(value, offset);
};
core_1.VoidPointer[NativeType.ctor] = common_1.emptyFunc;
core_1.VoidPointer[NativeType.dtor] = common_1.emptyFunc;
core_1.VoidPointer[NativeType.ctor_copy] = function (to, from) {
    to.copyFrom(from, 8);
};
core_1.VoidPointer[NativeType.ctor_move] = function (to, from) {
    this[NativeType.ctor_copy](to, from);
};
core_1.VoidPointer[NativeType.descriptor] = NativeType.defaultDescriptor;
exports.bool_t = new NativeType(1, 1, (ptr, offset) => ptr.getBoolean(offset), (ptr, v, offset) => ptr.setBoolean(v, offset));
exports.uint8_t = new NativeType(1, 1, (ptr, offset) => ptr.getInt8(offset), (ptr, v, offset) => ptr.setInt8(v, offset));
exports.uint16_t = new NativeType(2, 2, (ptr, offset) => ptr.getInt16(offset), (ptr, v, offset) => ptr.setInt16(v, offset));
exports.uint32_t = new NativeType(4, 4, (ptr, offset) => ptr.getUint32(offset), (ptr, v, offset) => ptr.setUint32(v, offset));
exports.uint64_as_float_t = new NativeType(8, 8, (ptr, offset) => ptr.getUint64AsFloat(offset), (ptr, v, offset) => ptr.setUint64WithFloat(v, offset));
exports.int8_t = new NativeType(1, 1, (ptr, offset) => ptr.getUint8(offset), (ptr, v, offset) => ptr.setUint8(v, offset));
exports.int16_t = new NativeType(2, 2, (ptr, offset) => ptr.getUint16(offset), (ptr, v, offset) => ptr.setUint16(v, offset));
exports.int32_t = new NativeType(4, 4, (ptr, offset) => ptr.getInt32(offset), (ptr, v, offset) => ptr.setInt32(v, offset));
exports.int64_as_float_t = new NativeType(8, 8, (ptr, offset) => ptr.getInt64AsFloat(offset), (ptr, v, offset) => ptr.setInt64WithFloat(v, offset));
exports.float32_t = new NativeType(4, 4, (ptr, offset) => ptr.getFloat32(offset), (ptr, v, offset) => ptr.setFloat32(v, offset));
exports.float64_t = new NativeType(8, 8, (ptr, offset) => ptr.getFloat64(offset), (ptr, v, offset) => ptr.setFloat64(v, offset));
const string_ctor = makefunc_1.makefunc.js(symbols_1.proc2['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ'], makefunc_1.RawTypeId.Void, null, core_1.VoidPointer);
const string_dtor = makefunc_1.makefunc.js(symbols_1.proc['std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate'], makefunc_1.RawTypeId.Void, null, core_1.VoidPointer);
exports.CxxString = new NativeType(0x20, 8, (ptr, offset) => ptr.getCxxString(offset), (ptr, v, offset) => ptr.setCxxString(v, offset), string_ctor, string_dtor, (to, from) => {
    to.setCxxString(from.getCxxString());
}, (to, from) => {
    to.copyFrom(from, 0x20);
    string_ctor(from);
});
exports.bin64_t = new NativeType(8, 8, (ptr, offset) => ptr.getBin64(offset), (ptr, v, offset) => ptr.setBin(v, offset)).extends({
    one: '\u0001\0\0\0',
    zero: '\0\0\0\0',
    minus_one: '\uffff\uffff\uffff\uffff',
});
exports.bin128_t = new NativeType(16, 8, (ptr) => ptr.getBin(8), (ptr, v) => ptr.setBin(v)).extends({
    one: '\u0001\0\0\0',
    zero: '\0\0\0\0',
    minus_one: '\uffff\uffff\uffff\uffff',
});
//# sourceMappingURL=data:application/json;base64,