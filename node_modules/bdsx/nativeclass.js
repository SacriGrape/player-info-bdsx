"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NativeArray = exports.nativeClass = exports.nativeField = exports.NativeClass = void 0;
const common_1 = require("./common");
const core_1 = require("./core");
const makefunc_1 = require("./makefunc");
const nativetype_1 = require("./nativetype");
const singleton_1 = require("./singleton");
const util_1 = require("./util");
const isNativeClass = Symbol();
const isSealed = Symbol();
const offsetmap = Symbol();
function accessor(key) {
    if (typeof key === 'number')
        return `[${key}]`;
    if (/^[a-zA-Z_$][a-zA-Z_$]*$/.test(key))
        return `.${key}`;
    return `[${JSON.stringify(key)}]`;
}
class StructureDefination {
    constructor(supercls) {
        this.fields = {};
        this.eof = supercls[nativetype_1.NativeType.size];
        this.align = supercls[nativetype_1.NativeType.align];
    }
    define(clazz, size) {
        if (size == null) {
            if (size === null) {
                this.eof = null;
            }
            else {
                size = this.eof !== null ? (((this.eof + this.align - 1) / this.align) | 0) * this.align : null;
            }
        }
        else {
            if (this.eof !== null) {
                if (this.eof > size)
                    throw Error(`field offsets are bigger than the class size. fields_end=${this.eof}, size=${size}`);
            }
            this.eof = size;
        }
        if (makefunc_1.makefunc.np2js in clazz) {
            clazz[nativetype_1.NativeType.getter] = wrapperGetter;
            clazz[nativetype_1.NativeType.descriptor] = wrapperDescriptor;
        }
        sealClass(clazz);
        const offsets = clazz[offsetmap] = {};
        const propmap = new nativetype_1.NativeDescriptorBuilder;
        for (const key in this.fields) {
            const [type, offset] = this.fields[key];
            type[nativetype_1.NativeType.descriptor](propmap, key, offset);
            offsets[key] = offset;
        }
        const types = propmap.types;
        if (propmap.ctor.code !== '') {
            const ctorfunc = new Function('NativeType', 'types', propmap.ctor.code);
            const superCtor = clazz.prototype[nativetype_1.NativeType.ctor];
            clazz.prototype[nativetype_1.NativeType.ctor] = function () {
                ctorfunc.call(this, nativetype_1.NativeType, types);
                superCtor.call(this);
            };
        }
        if (propmap.dtor.code !== '') {
            const dtorfunc = new Function('NativeType', 'types', propmap.dtor.code);
            const superDtor = clazz.prototype[nativetype_1.NativeType.dtor];
            clazz.prototype[nativetype_1.NativeType.dtor] = function () {
                dtorfunc.call(this, nativetype_1.NativeType, types);
                superDtor.call(this);
            };
        }
        if (propmap.ctor_copy.code !== '') {
            const copyfunc = new Function('NativeType', 'types', 'o', propmap.ctor_copy.code);
            clazz.prototype._default_copy = function (o) {
                copyfunc.call(this, nativetype_1.NativeType, types, o);
            };
        }
        clazz[core_1.StructurePointer.contentSize] =
            clazz.prototype[nativetype_1.NativeType.size] =
                clazz[nativetype_1.NativeType.size] = size;
        clazz[nativetype_1.NativeType.align] = this.align;
        Object.defineProperties(clazz.prototype, propmap.desc);
    }
    field(key, type, fieldOffset) {
        if (util_1.isBaseOf(type, NativeClass)) {
            sealClass(type);
        }
        const alignofType = type[nativetype_1.NativeType.align];
        if (alignofType > this.align)
            this.align = alignofType;
        let offset = 0;
        if (fieldOffset != null) {
            offset = fieldOffset;
        }
        else {
            if (this.eof === null) {
                throw Error('Cannot set a field without the offset, if the sizeof previous field or super class is unknown');
            }
            offset = (((this.eof + alignofType - 1) / alignofType) | 0) * alignofType;
        }
        this.fields[key] = [type, offset];
        const sizeofType = type[nativetype_1.NativeType.size];
        if (sizeofType === null) {
            this.eof = null;
        }
        else {
            offset += sizeofType;
            if (this.eof !== null) {
                if (offset !== null && offset > this.eof)
                    this.eof = offset;
            }
        }
    }
}
const structures = new WeakMap();
class NativeClass extends core_1.StructurePointer {
    constructor(ptr) {
        super(ptr);
    }
    static isNativeClassType(type) {
        return isNativeClass in type;
    }
    [(_a = nativetype_1.NativeType.size, _b = nativetype_1.NativeType.align, _c = core_1.StructurePointer.contentSize, _d = isNativeClass, _e = isSealed, nativetype_1.NativeType.size, nativetype_1.NativeType.ctor)]() {
        // empty
    }
    [nativetype_1.NativeType.dtor]() {
        // empty
    }
    _default_copy(from) {
        this.copyFrom(from, this[nativetype_1.NativeType.size]);
    }
    [nativetype_1.NativeType.ctor_copy](from) {
        this._default_copy(from);
    }
    [nativetype_1.NativeType.ctor_move](from) {
        this[nativetype_1.NativeType.ctor_copy](from);
    }
    [nativetype_1.NativeType.setter](from) {
        this[nativetype_1.NativeType.dtor]();
        this[nativetype_1.NativeType.ctor_copy](from);
    }
    static [nativetype_1.NativeType.ctor](ptr) {
        ptr.as(this)[nativetype_1.NativeType.ctor]();
    }
    static [nativetype_1.NativeType.dtor](ptr) {
        ptr.as(this)[nativetype_1.NativeType.dtor]();
    }
    static [nativetype_1.NativeType.ctor_copy](to, from) {
        to.as(this)[nativetype_1.NativeType.ctor_copy](new this(from));
    }
    static [nativetype_1.NativeType.ctor_move](to, from) {
        to.as(this)[nativetype_1.NativeType.ctor_move](new this(from));
    }
    static [nativetype_1.NativeType.setter](ptr, value, offset) {
        const nptr = ptr.addAs(this, offset, (offset || 0) >> 31);
        nptr[nativetype_1.NativeType.setter](value);
    }
    static [nativetype_1.NativeType.getter](ptr, offset) {
        return ptr.addAs(this, offset, (offset || 0) >> 31);
    }
    static [nativetype_1.NativeType.descriptor](builder, key, offset) {
        const type = this;
        builder.desc[key] = {
            configurable: true,
            get() {
                const value = type[nativetype_1.NativeType.getter](this, offset);
                Object.defineProperty(this, key, { value });
                return value;
            }
        };
        if (type[nativetype_1.NativeType.ctor] !== common_1.emptyFunc) {
            builder.ctor.code += `this${accessor(key)}[NativeType.ctor]();\n`;
        }
        if (type[nativetype_1.NativeType.dtor] !== common_1.emptyFunc) {
            builder.dtor.code += `this${accessor(key)}[NativeType.dtor]();\n`;
        }
        builder.ctor_copy.code += `this${accessor(key)}[NativeType.ctor_copy](o${accessor(key)});\n`;
    }
    /**
     * alias of [NativeType.ctor]();
     */
    construct() {
        this[nativetype_1.NativeType.ctor]();
    }
    /**
     * alias of [NativeType.dtor]();
     */
    destruct() {
        this[nativetype_1.NativeType.dtor]();
    }
    static next(ptr, count) {
        const clazz = this;
        const size = clazz[core_1.StructurePointer.contentSize];
        if (size === null) {
            throw Error('Cannot call the next with the unknown sized structure');
        }
        return ptr.addAs(this, count * size);
    }
    /**
     * Cannot construct & Unknown size
     */
    static abstract(fields, defineSize, defineAlign) {
        const clazz = this;
        clazz.define(fields, defineSize, defineAlign, true);
    }
    static define(fields, defineSize, defineAlign = null, abstract = false) {
        const clazz = this;
        if (makefunc_1.makefunc.np2js in clazz) {
            clazz[nativetype_1.NativeType.getter] = wrapperGetter;
            clazz[nativetype_1.NativeType.descriptor] = wrapperDescriptor;
        }
        if (clazz.hasOwnProperty(isSealed)) {
            throw Error('Cannot define the structure of the already used');
        }
        const superclass = clazz.__proto__;
        sealClass(superclass);
        const def = new StructureDefination(superclass);
        structures.set(clazz, def);
        for (const key in fields) {
            const type = fields[key];
            if (type instanceof Array) {
                def.field(key, type[0], type[1]);
            }
            else {
                def.field(key, type);
            }
        }
        if (abstract)
            def.eof = null;
        if (defineAlign !== null)
            def.align = defineAlign;
        def.define(clazz, defineSize);
    }
    static defineAsUnion(fields, abstract = false) {
        const clazz = this;
        for (const key in fields) {
            const item = fields[key];
            if (!(item instanceof Array)) {
                fields[key] = [item, 0];
            }
        }
        return clazz.define(fields, undefined, undefined, abstract);
    }
    static ref() {
        return refSingleton.newInstance(this, () => makeReference(this));
    }
    static offsetOf(field) {
        return this[offsetmap][field];
    }
}
exports.NativeClass = NativeClass;
NativeClass[_a] = 0;
NativeClass[_b] = 1;
NativeClass[_c] = 0;
NativeClass[_d] = true;
NativeClass[_e] = true;
NativeClass.prototype[nativetype_1.NativeType.size] = 0;
function sealClass(cls) {
    let node = cls;
    while (!node.hasOwnProperty(isSealed)) {
        node[isSealed] = true;
        node = node.__proto__;
    }
}
function nativeField(type, fieldOffset) {
    return (obj, key) => {
        const clazz = obj.constructor;
        let def = structures.get(clazz);
        if (def === undefined)
            structures.set(clazz, def = new StructureDefination(clazz.__proto__));
        def.field(key, type, fieldOffset);
    };
}
exports.nativeField = nativeField;
function nativeClass(size, align = null) {
    return (clazz) => {
        const def = structures.get(clazz);
        if (def === undefined) {
            if (makefunc_1.makefunc.np2js in clazz) {
                clazz[nativetype_1.NativeType.getter] = wrapperGetter;
                clazz[nativetype_1.NativeType.descriptor] = wrapperDescriptor;
            }
            sealClass(clazz);
            const superclass = clazz.__proto__;
            clazz[core_1.StructurePointer.contentSize] =
                clazz.prototype[nativetype_1.NativeType.size] =
                    clazz[nativetype_1.NativeType.size] = size === undefined ? superclass[nativetype_1.NativeType.size] : size;
            clazz[nativetype_1.NativeType.align] = align == null ? superclass[nativetype_1.NativeType.align] : align;
        }
        else {
            structures.delete(clazz);
            if (align !== null)
                def.align = align;
            def.define(clazz, size);
        }
    };
}
exports.nativeClass = nativeClass;
function wrapperGetter(ptr, offset) {
    return this[makefunc_1.makefunc.np2js](ptr.addAs(this, offset));
}
function wrapperGetterRef(ptr, offset) {
    return this[makefunc_1.makefunc.np2js](ptr.getNullablePointerAs(this, offset));
}
function wrapperSetterRef(ptr, value, offset) {
    ptr.setPointer(this[makefunc_1.makefunc.js2np](value), offset);
}
function wrapperDescriptor(builder, key, offset) {
    const clazz = this;
    builder.desc[key] = {
        configurable: true,
        get() {
            const value = clazz[makefunc_1.makefunc.np2js](this.addAs(clazz, offset));
            Object.defineProperty(this, key, { value });
            return value;
        }
    };
    if (clazz[nativetype_1.NativeType.ctor] !== common_1.emptyFunc) {
        builder.ctor.code += `this${accessor(key)}[NativeType.ctor]();\n`;
    }
    if (clazz[nativetype_1.NativeType.dtor] !== common_1.emptyFunc) {
        builder.dtor.code += `this${accessor(key)}[NativeType.dtor]();\n`;
    }
    builder.ctor_copy.code += `this${accessor(key)}[NativeType.ctor_copy](o${accessor(key)});\n`;
}
const refSingleton = new singleton_1.Singleton();
class NativeArray extends core_1.PrivatePointer {
    static [nativetype_1.NativeType.getter](ptr, offset) {
        return ptr.addAs(this, offset, offset >> 31);
    }
    static [nativetype_1.NativeType.setter](ptr, value, offset) {
        throw Error("non assignable");
    }
    static [nativetype_1.NativeType.descriptor](builder, key, offset) {
        const type = this;
        builder.desc[key] = {
            configurable: true,
            get() {
                const value = this.addAs(type, offset, offset >> 31);
                Object.defineProperty(this, key, { value });
                return value;
            }
        };
        if (type[nativetype_1.NativeType.ctor] !== common_1.emptyFunc) {
            builder.ctor.code += `this${accessor(key)}[NativeType.ctor]();\n`;
        }
        if (type[nativetype_1.NativeType.dtor] !== common_1.emptyFunc) {
            builder.dtor.code += `this${accessor(key)}[NativeType.dtor]();\n`;
        }
        builder.ctor_copy.code += `this${accessor(key)}[NativeType.ctor_copy](o${accessor(key)});\n`;
    }
    static make(itemType, count) {
        var _g, _h, _j;
        const itemSize = itemType[nativetype_1.NativeType.size];
        if (itemSize === null)
            throw Error('Unknown size of item. NativeArray needs item size');
        const propmap = new nativetype_1.NativeDescriptorBuilder;
        propmap.desc.length = { value: count };
        let off = 0;
        for (let i = 0; i < count; i++) {
            itemType[nativetype_1.NativeType.descriptor](propmap, i, off);
            off += itemSize;
        }
        class NativeArrayImpl extends NativeArray {
        }
        _g = nativetype_1.NativeType.size, _h = core_1.StructurePointer.contentSize, _j = nativetype_1.NativeType.align, nativetype_1.NativeType.size;
        NativeArrayImpl[_g] = off;
        NativeArrayImpl[_h] = off;
        NativeArrayImpl[_j] = itemType[nativetype_1.NativeType.align];
        NativeArrayImpl.prototype[nativetype_1.NativeType.size] = off;
        Object.defineProperties(NativeArrayImpl.prototype, propmap.desc);
        return NativeArrayImpl;
    }
}
exports.NativeArray = NativeArray;
_f = nativetype_1.NativeType.align;
NativeArray[_f] = 1;
exports.MantleClass = NativeClass;
function makeReference(type) {
    var _g, _h, _j;
    const Parent = type;
    class Pointer extends Parent {
        constructor() {
            super();
        }
        static [(_g = nativetype_1.NativeType.size, _h = nativetype_1.NativeType.align, core_1.StructurePointer.contentSize, _j = isSealed, nativetype_1.NativeType.getter)](ptr, offset) {
            return ptr.getNullablePointerAs(this, offset);
        }
        static [nativetype_1.NativeType.setter](ptr, value, offset) {
            ptr.setPointer(value, offset);
        }
        static [nativetype_1.NativeType.ctor]() {
            // empty
        }
        static [nativetype_1.NativeType.dtor]() {
            // empty
        }
        static [nativetype_1.NativeType.ctor_copy](ptr, from) {
            ptr.copyFrom(from, 8);
        }
        static [nativetype_1.NativeType.ctor_move](ptr, from) {
            this[nativetype_1.NativeType.ctor_copy](ptr, from);
        }
        static [nativetype_1.NativeType.descriptor](builder, key, offset) {
            common_1.abstract();
        }
        static define() {
            throw Error('Wrong call, does not need to define structure of pointer class');
        }
    }
    Pointer[_g] = 8;
    Pointer[_h] = 8;
    Pointer[_j] = true;
    Pointer[nativetype_1.NativeType.descriptor] = nativetype_1.NativeType.defaultDescriptor;
    if (makefunc_1.makefunc.np2js in type)
        Pointer[nativetype_1.NativeType.getter] = wrapperGetterRef;
    if (makefunc_1.makefunc.js2np in type)
        Pointer[nativetype_1.NativeType.setter] = wrapperSetterRef;
    return Pointer;
}
//# sourceMappingURL=data:application/json;base64,