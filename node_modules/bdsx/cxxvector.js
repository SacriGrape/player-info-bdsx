"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CxxVector = void 0;
const proc_1 = require("./bds/proc");
const common_1 = require("./common");
const core_1 = require("./core");
const dll_1 = require("./dll");
const makefunc_1 = require("./makefunc");
const nativeclass_1 = require("./nativeclass");
const nativetype_1 = require("./nativetype");
const singleton_1 = require("./singleton");
const VECTOR_SIZE = 12;
const singleton = new singleton_1.Singleton();
/**
 * std::vector<T>
 * C++ standard dynamic array class
 */
class CxxVector extends nativeclass_1.NativeClass {
    constructor(address) {
        super(address);
    }
    [nativetype_1.NativeType.ctor]() {
        dll_1.dll.vcruntime140.memset(this, 0, VECTOR_SIZE);
    }
    [nativetype_1.NativeType.dtor]() {
        const ptr = this.getPointer(0);
        dll_1.dll.ucrtbase.free(ptr);
    }
    _resize(newsizeBytes, newcapBytes, oldptr, oldsizeBytes) {
        const compsize = this.componentType[nativetype_1.NativeType.size];
        const allocated = CxxVector._alloc16(newcapBytes);
        this.setPointer(allocated, 0);
        const oldsize = oldsizeBytes / compsize | 0;
        const newsize = newsizeBytes / compsize | 0;
        this._move_alloc(allocated, oldptr, Math.min(oldsize, newsize));
        dll_1.dll.ucrtbase.free(oldptr);
        for (let i = oldsize; i < newsize; i++) {
            this._ctor(allocated, i);
            allocated.move(compsize);
        }
        this.setPointer(allocated, 8);
        allocated.move(newcapBytes - newsizeBytes);
        this.setPointer(allocated, 16);
    }
    set(idx, component) {
        const type = this.componentType;
        const compsize = type[nativetype_1.NativeType.size];
        let begptr = this.getPointer(0);
        const oldsizeBytes = this.getPointer(8).subptr(begptr);
        if (idx * compsize < oldsizeBytes) {
            begptr.move(idx * compsize);
            this._copy(begptr, component, idx);
            return;
        }
        const capBytes = this.getPointer(16).subptr(begptr);
        if (idx >= capBytes) {
            const newBytes = (idx + 1) * compsize;
            this._resize(newBytes, Math.max(capBytes * 2, newBytes), begptr, oldsizeBytes);
            begptr = this.getPointer(0);
        }
        begptr.move(idx * compsize);
        this._copy(begptr, component, idx);
    }
    get(idx) {
        const beginptr = this.getPointer(0);
        const endptr = this.getPointer(8);
        const compsize = this.componentType[nativetype_1.NativeType.size];
        const size = endptr.subptr(beginptr) / compsize | 0;
        if (idx < 0 || idx >= size)
            return null;
        beginptr.move(idx * compsize);
        return this._get(beginptr, idx);
    }
    pop() {
        const begptr = this.getPointer(0);
        const endptr = this.getPointer(8);
        if (endptr.equals(begptr))
            return false;
        const compsize = this.componentType[nativetype_1.NativeType.size];
        endptr.move(-compsize, -1);
        const idx = endptr.subptr(begptr) / compsize | 0;
        this._dtor(endptr, idx);
        this.setPointer(endptr, 8);
        return true;
    }
    push(component) {
        let begptr = this.getPointer(0);
        const endptr = this.getPointer(8);
        const compsize = this.componentType[nativetype_1.NativeType.size];
        const idx = endptr.subptr(begptr) / compsize | 0;
        const capptr = this.getPointer(16);
        if (capptr.equals(endptr)) {
            const oldsizeBytes = endptr.subptr(begptr);
            const capBytes = capptr.subptr(begptr);
            const newsizeBytes = oldsizeBytes + this.componentType[nativetype_1.NativeType.size];
            this._resize(newsizeBytes, Math.max(capBytes * 2, newsizeBytes), begptr, oldsizeBytes);
            begptr = this.getPointer(0);
        }
        begptr.move(idx * compsize);
        this._copy(begptr, component, idx);
    }
    size() {
        const beginptr = this.getPointer(0);
        const endptr = this.getPointer(8);
        return endptr.subptr(beginptr) / this.componentType[nativetype_1.NativeType.size] | 0;
    }
    capacity() {
        const beginptr = this.getPointer(0);
        const endptr = this.getPointer(16);
        return endptr.subptr(beginptr) / this.componentType[nativetype_1.NativeType.size] | 0;
    }
    toArray() {
        const n = this.size();
        const out = new Array(n);
        for (let i = 0; i < n; i++) {
            out[i] = this.get(i);
        }
        return out;
    }
    *[Symbol.iterator]() {
        const n = this.size();
        for (let i = 0; i < n; i++) {
            yield this.get(i);
        }
    }
    /**
     * @deprecated use .destruct()
     */
    dispose() {
        this[nativetype_1.NativeType.dtor]();
    }
    static make(type) {
        return singleton.newInstance(type, () => {
            if (type[nativetype_1.NativeType.size] === undefined)
                throw Error("CxxVector needs the component size");
            if (nativeclass_1.NativeClass.isNativeClassType(type)) {
                class VectorImpl extends CxxVector {
                    constructor() {
                        super(...arguments);
                        this.cache = [];
                    }
                    _move_alloc(allocated, oldptr, movesize) {
                        const clazz = this.componentType;
                        const compsize = this.componentType[nativetype_1.NativeType.size];
                        const oldptrmove = oldptr.add();
                        for (let i = 0; i < movesize; i++) {
                            const new_item = allocated.as(clazz);
                            const old_item = this._get(allocated, i);
                            this.cache[i] = new_item;
                            new_item[nativetype_1.NativeType.ctor_move](old_item);
                            old_item[nativetype_1.NativeType.dtor]();
                            this.componentType[nativetype_1.NativeType.ctor_move](allocated, oldptrmove);
                            allocated.move(compsize);
                            oldptrmove.move(compsize);
                        }
                    }
                    _get(ptr, index) {
                        const item = this.cache[index];
                        if (item !== undefined)
                            return item;
                        const type = this.componentType;
                        return this.cache[index] = ptr.as(type);
                    }
                    _dtor(ptr, index) {
                        this._get(ptr, index)[nativetype_1.NativeType.dtor]();
                    }
                    _ctor(ptr, index) {
                        this._get(ptr, index)[nativetype_1.NativeType.ctor]();
                    }
                    _copy(ptr, from, index) {
                        this._get(ptr, index)[nativetype_1.NativeType.setter](from);
                    }
                }
                VectorImpl.componentType = type;
                VectorImpl.prototype.componentType = type;
                VectorImpl.abstract({}, 0x18);
                return VectorImpl;
            }
            else {
                class VectorImpl extends CxxVector {
                    _move_alloc(allocated, oldptr, movesize) {
                        const compsize = this.componentType[nativetype_1.NativeType.size];
                        const oldptrmove = oldptr.add();
                        for (let i = 0; i < movesize; i++) {
                            this.componentType[nativetype_1.NativeType.ctor_move](allocated, oldptrmove);
                            allocated.move(compsize);
                            oldptrmove.move(compsize);
                        }
                    }
                    _get(ptr) {
                        const type = this.componentType;
                        return type[nativetype_1.NativeType.getter](ptr);
                    }
                    _dtor(ptr) {
                        const type = this.componentType;
                        type[nativetype_1.NativeType.dtor](ptr);
                    }
                    _ctor(ptr) {
                        const type = this.componentType;
                        type[nativetype_1.NativeType.ctor](ptr);
                    }
                    _copy(ptr, from) {
                        const type = this.componentType;
                        type[nativetype_1.NativeType.setter](ptr, from);
                    }
                }
                VectorImpl.componentType = type;
                VectorImpl.prototype.componentType = type;
                VectorImpl.abstract({}, 0x18);
                return VectorImpl;
            }
        });
    }
    static _alloc16(size) {
        common_1.abstract();
    }
}
exports.CxxVector = CxxVector;
CxxVector._alloc16 = proc_1.procHacker.js("std::_Allocate<16,std::_Default_allocate_traits,0>", core_1.NativePointer, null, makefunc_1.RawTypeId.FloatAsInt64);
//# sourceMappingURL=data:application/json;base64,