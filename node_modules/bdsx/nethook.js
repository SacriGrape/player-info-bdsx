"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nethook = void 0;
const tslib_1 = require("tslib");
const krevent_1 = require("krevent");
const assembler_1 = require("./assembler");
const networkidentifier_1 = require("./bds/networkidentifier");
const packet_1 = require("./bds/packet");
const packetids_1 = require("./bds/packetids");
const packets_1 = require("./bds/packets");
const proc_1 = require("./bds/proc");
const common_1 = require("./common");
const core_1 = require("./core");
const makefunc_1 = require("./makefunc");
const nativeclass_1 = require("./nativeclass");
const pointer_1 = require("./pointer");
const sharedpointer_1 = require("./sharedpointer");
const source_map_support_1 = require("./source-map-support");
const util_1 = require("./util");
const asmcode = require("./asm/asmcode");
const MAX_PACKET_ID = 0x100;
const EVENT_INDEX_COUNT = 0x500;
let ReadOnlyBinaryStream = class ReadOnlyBinaryStream extends nativeclass_1.NativeClass {
    read(dest, size) {
        common_1.abstract();
    }
};
tslib_1.__decorate([
    nativeclass_1.nativeField(pointer_1.CxxStringWrapper.ref(), 0x38)
], ReadOnlyBinaryStream.prototype, "data", void 0);
ReadOnlyBinaryStream = tslib_1.__decorate([
    nativeclass_1.nativeClass(null)
], ReadOnlyBinaryStream);
ReadOnlyBinaryStream.prototype.read = makefunc_1.makefunc.js([0x8], makefunc_1.RawTypeId.Boolean, { this: ReadOnlyBinaryStream }, core_1.VoidPointer, makefunc_1.RawTypeId.FloatAsInt64);
let OnPacketRBP = class OnPacketRBP extends nativeclass_1.NativeClass {
};
tslib_1.__decorate([
    nativeclass_1.nativeField(sharedpointer_1.SharedPtr.make(packet_1.Packet), 0x58)
], OnPacketRBP.prototype, "packet", void 0);
tslib_1.__decorate([
    nativeclass_1.nativeField(ReadOnlyBinaryStream, 0xa0)
], OnPacketRBP.prototype, "stream", void 0);
OnPacketRBP = tslib_1.__decorate([
    nativeclass_1.nativeClass(null)
], OnPacketRBP);
const alltargets = new Array(EVENT_INDEX_COUNT);
for (let i = 0; i < EVENT_INDEX_COUNT; i++) {
    alltargets[i] = null;
}
function getNetEventTarget(type, packetId) {
    if ((packetId >>> 0) >= MAX_PACKET_ID) {
        throw Error(`Out of range: packetId < 0x100 (packetId=${packetId})`);
    }
    const id = type * MAX_PACKET_ID + packetId;
    let target = alltargets[id];
    if (target !== null)
        return target;
    alltargets[id] = target = new krevent_1.default;
    return target;
}
let errorListener = common_1.emptyFunc;
let sendInternalOriginal;
var nethook;
(function (nethook) {
    let EventType;
    (function (EventType) {
        EventType[EventType["Raw"] = 0] = "Raw";
        EventType[EventType["Before"] = 1] = "Before";
        EventType[EventType["After"] = 2] = "After";
        EventType[EventType["Send"] = 3] = "Send";
        EventType[EventType["SendRaw"] = 4] = "SendRaw";
    })(EventType = nethook.EventType || (nethook.EventType = {}));
    function hooking(fireError) {
        errorListener = fireError;
        // hook raw
        asmcode.onPacketRaw = makefunc_1.makefunc.np(onPacketRaw, packet_1.PacketSharedPtr, null, OnPacketRBP, makefunc_1.RawTypeId.Int32, networkidentifier_1.NetworkHandler.Connection);
        proc_1.procHacker.patching('hook-packet-raw', 'NetworkHandler::_sortAndPacketizeEvents', 0x1ff, asmcode.packetRawHook, assembler_1.Register.rax, true, [
            0x41, 0x8B, 0xD7,
            0x48, 0x8D, 0x4D, 0x58,
            0xE8, 0x05, 0x11, 0x00, 0x00 // call <bedrock_server.public: static class std::shared_ptr<class Packet> __cdecl MinecraftPackets::createPacket(enum MinecraftPacketIds)>
        ], []);
        // hook before
        asmcode.onPacketBefore = makefunc_1.makefunc.np(onPacketBefore, packet_1.ExtendedStreamReadResult, null, packet_1.ExtendedStreamReadResult, OnPacketRBP, makefunc_1.RawTypeId.Int32);
        proc_1.procHacker.patching('hook-packet-before', 'NetworkHandler::_sortAndPacketizeEvents', 0x2e8, asmcode.packetBeforeHook, // original code depended
        assembler_1.Register.rax, true, [
            0x48, 0x8B, 0x01,
            0x4C, 0x8D, 0x85, 0xA0, 0x00, 0x00, 0x00,
            0x48, 0x8D, 0x54, 0x24, 0x70,
            0xFF, 0x50, 0x20, // call qword ptr ds:[rax+20]
        ], []);
        // skip packet when result code is 0x7f
        const packetViolationOriginalCode = [
            0x48, 0x89, 0x5C, 0x24, 0x10,
            0x55,
            0x56,
            0x57,
            0x41, 0x54,
            0x41, 0x55,
            0x41, 0x56, // push r14
        ];
        asmcode.PacketViolationHandlerHandleViolationAfter = proc_1.proc['PacketViolationHandler::_handleViolation'].add(packetViolationOriginalCode.length);
        proc_1.procHacker.patching('hook-packet-before-skip', 'PacketViolationHandler::_handleViolation', 0, asmcode.packetBeforeCancelHandling, assembler_1.Register.rax, false, packetViolationOriginalCode, [3, 7, 21, 24]);
        // hook after
        asmcode.onPacketAfter = makefunc_1.makefunc.np(onPacketAfter, makefunc_1.RawTypeId.Void, null, OnPacketRBP, makefunc_1.RawTypeId.Int32);
        proc_1.procHacker.patching('hook-packet-after', 'NetworkHandler::_sortAndPacketizeEvents', 0x43a, asmcode.packetAfterHook, // original code depended
        assembler_1.Register.rax, true, [
            0x48, 0x8B, 0x01,
            0x4C, 0x8D, 0x4D, 0x58,
            0x4C, 0x8B, 0xC6,
            0x49, 0x8B, 0xD6,
            0xFF, 0x50, 0x08, // call qword ptr ds:[rax+8]
        ], []);
        const onPacketSendNp = makefunc_1.makefunc.np(onPacketSend, makefunc_1.RawTypeId.Void, null, networkidentifier_1.NetworkHandler, networkidentifier_1.NetworkIdentifier, packet_1.Packet);
        asmcode.onPacketSend = onPacketSendNp;
        proc_1.procHacker.hookingRawWithCallOriginal('NetworkHandler::send', onPacketSendNp, [assembler_1.Register.rcx, assembler_1.Register.rdx, assembler_1.Register.r8, assembler_1.Register.r9], []);
        proc_1.procHacker.patching('hook-packet-send-all', 'LoopbackPacketSender::sendToClients', 0x90, asmcode.packetSendAllHook, // original code depended
        assembler_1.Register.rax, true, [
            0x49, 0x8B, 0x07,
            0x49, 0x8D, 0x96, 0x20, 0x02, 0x00, 0x00,
            0x49, 0x8B, 0xCF,
            0xFF, 0x50, 0x18, // call qword ptr ds:[rax+18]
        ], []);
        sendInternalOriginal = proc_1.procHacker.hooking('NetworkHandler::_sendInternal', makefunc_1.RawTypeId.Void, null, networkidentifier_1.NetworkHandler, networkidentifier_1.NetworkIdentifier, packet_1.Packet, pointer_1.CxxStringWrapper)(onPacketSendInternal);
    }
    nethook.hooking = hooking;
    /**
     * @deprecated just use `connreq.cert.get*()` from LoginPacket directly
     * @param ptr login packet pointer
     * @return [xuid, username]
     */
    function readLoginPacket(packet) {
        const loginpacket = new packets_1.LoginPacket(packet);
        const conn = loginpacket.connreq;
        if (conn !== null) {
            const cert = conn.cert;
            if (cert !== null) {
                return [cert.getXuid(), cert.getId()];
            }
        }
        throw Error('LoginPacket does not have cert info');
    }
    nethook.readLoginPacket = readLoginPacket;
    /**
     * @deprecated use nethook.*
     */
    function getEventTarget(type, packetId) {
        return getNetEventTarget(type, packetId);
    }
    nethook.getEventTarget = getEventTarget;
    /**
     * @deprecated use *Packet.create() instead
     */
    nethook.createPacket = packet_1.createPacket;
    /**
     * @deprecated use packet.sendTo instead
     */
    function sendPacket(networkIdentifier, packet, unknownarg = 0) {
        new packet_1.Packet(packet).sendTo(networkIdentifier, 0);
    }
    nethook.sendPacket = sendPacket;
    /**
     * before 'before' and 'after'
     * earliest event for the packet receiving.
     * It will bring raw packet buffers before parsing
     * It will cancel the packet if you return false
     */
    function raw(id) {
        return getNetEventTarget(nethook.EventType.Raw, id);
    }
    nethook.raw = raw;
    /**
     * after 'raw', before 'after'
     * the event that before processing but after parsed from raw.
     */
    function before(id) {
        return getNetEventTarget(nethook.EventType.Before, id);
    }
    nethook.before = before;
    /**
     * after 'raw' and 'before'
     * the event that after processing. some fields are assigned after the processing
     */
    function after(id) {
        return getNetEventTarget(nethook.EventType.After, id);
    }
    nethook.after = after;
    /**
     * before serializing.
     * it can modify class fields.
     */
    function send(id) {
        return getNetEventTarget(nethook.EventType.Send, id);
    }
    nethook.send = send;
    /**
     * after serializing. before sending.
     * it can access serialized buffer.
     */
    function sendRaw(id) {
        return getNetEventTarget(nethook.EventType.SendRaw, id);
    }
    nethook.sendRaw = sendRaw;
    /** @deprecated use NetworkIdentifier.close */
    nethook.close = networkidentifier_1.NetworkIdentifier.close;
    /**
     * Write all packets to console
     */
    function watchAll(exceptions = [
        packetids_1.MinecraftPacketIds.ClientCacheBlobStatus,
        packetids_1.MinecraftPacketIds.LevelChunk,
        packetids_1.MinecraftPacketIds.ClientCacheMissResponse,
        packetids_1.MinecraftPacketIds.MoveActorDelta,
        packetids_1.MinecraftPacketIds.SetActorMotion,
        packetids_1.MinecraftPacketIds.SetActorData,
    ]) {
        const ex = new Set(exceptions);
        for (let i = 1; i <= 0x88; i++) {
            if (ex.has(i))
                continue;
            before(i).on((ptr, ni, id) => {
                console.log(`R ${packetids_1.MinecraftPacketIds[id]}(${id}) ${util_1.hex(ptr.getBuffer(0x10, 0x28))}`);
            });
        }
        for (let i = 1; i <= 0x88; i++) {
            if (ex.has(i))
                continue;
            send(i).on((ptr, ni, id) => {
                console.log(`S ${packetids_1.MinecraftPacketIds[id]}(${id}) ${util_1.hex(ptr.getBuffer(0x10, 0x28))}`);
            });
        }
    }
    nethook.watchAll = watchAll;
})(nethook = exports.nethook || (exports.nethook = {}));
const RAW_OFFSET = nethook.EventType.Raw * MAX_PACKET_ID;
const BEFORE_OFFSET = nethook.EventType.Before * MAX_PACKET_ID;
const AFTER_OFFSET = nethook.EventType.After * MAX_PACKET_ID;
const SEND_OFFSET = nethook.EventType.Send * MAX_PACKET_ID;
const SEND_AFTER_OFFSET = nethook.EventType.SendRaw * MAX_PACKET_ID;
function onPacketRaw(rbp, packetId, conn) {
    try {
        if ((packetId >>> 0) >= MAX_PACKET_ID) {
            console.error(`onPacketRaw - Unexpected packetId: ${packetId}`);
            return packet_1.createPacketRaw(rbp.packet, packetId);
        }
        const ni = conn.networkIdentifier;
        nethook.lastSender = ni;
        const packet_dest = rbp.packet;
        const target = alltargets[packetId + RAW_OFFSET];
        if (target !== null && !target.isEmpty()) {
            const s = rbp.stream;
            const data = s.data;
            const rawpacketptr = data.valueptr;
            for (const listener of target.allListeners()) {
                try {
                    const ptr = rawpacketptr.add();
                    if (listener(ptr, data.length, ni, packetId) === common_1.CANCEL) {
                        util_1._tickCallback();
                        return null;
                    }
                }
                catch (err) {
                    errorListener(err);
                }
            }
            util_1._tickCallback();
        }
        return packet_1.createPacketRaw(packet_dest, packetId);
    }
    catch (err) {
        source_map_support_1.remapAndPrintError(err);
        return null;
    }
}
function onPacketBefore(result, rbp, packetId) {
    try {
        if ((packetId >>> 0) >= MAX_PACKET_ID) {
            console.error(`onPacketBefore - Unexpected packetId: ${packetId}`);
            return result;
        }
        if (result.streamReadResult !== packet_1.StreamReadResult.Pass)
            return result;
        const target = alltargets[packetId + BEFORE_OFFSET];
        if (target !== null && !target.isEmpty()) {
            const packet = rbp.packet.p;
            const TypedPacket = packets_1.PacketIdToType[packetId] || packet_1.Packet;
            const typedPacket = new TypedPacket(packet);
            for (const listener of target.allListeners()) {
                try {
                    if (listener(typedPacket, nethook.lastSender, packetId) === common_1.CANCEL) {
                        result.streamReadResult = packet_1.StreamReadResult.Ignore;
                        util_1._tickCallback();
                        return result;
                    }
                }
                catch (err) {
                    errorListener(err);
                }
            }
            util_1._tickCallback();
        }
    }
    catch (err) {
        source_map_support_1.remapAndPrintError(err);
    }
    return result;
}
function onPacketAfter(rbp, packetId) {
    try {
        if ((packetId >>> 0) >= MAX_PACKET_ID) {
            console.error(`onPacketAfter - Unexpected packetId: ${packetId}`);
            return;
        }
        const target = alltargets[packetId + AFTER_OFFSET];
        if (target !== null && !target.isEmpty()) {
            const packet = rbp.packet.p;
            const TypedPacket = packets_1.PacketIdToType[packetId] || packet_1.Packet;
            const typedPacket = new TypedPacket(packet);
            for (const listener of target.allListeners()) {
                try {
                    listener(typedPacket, nethook.lastSender, packetId);
                }
                catch (err) {
                    errorListener(err);
                }
            }
            util_1._tickCallback();
        }
    }
    catch (err) {
        source_map_support_1.remapAndPrintError(err);
    }
}
function onPacketSend(handler, ni, packet) {
    try {
        const packetId = packet.getId();
        if ((packetId >>> 0) >= MAX_PACKET_ID) {
            console.error(`onPacketSend - Unexpected packetId: ${packetId}`);
            return;
        }
        const target = alltargets[packetId + SEND_OFFSET];
        if (target !== null && !target.isEmpty()) {
            const TypedPacket = packets_1.PacketIdToType[packetId] || packet_1.Packet;
            const packetptr = new TypedPacket(packet);
            const ignore = target.fire(packetptr, ni, packetId) === common_1.CANCEL;
            util_1._tickCallback();
            if (ignore)
                return;
        }
    }
    catch (err) {
        source_map_support_1.remapAndPrintError(err);
    }
}
function onPacketSendInternal(handler, ni, packet, data) {
    try {
        const packetId = packet.getId();
        if ((packetId >>> 0) >= MAX_PACKET_ID) {
            console.error(`onPacketSendInternal - Unexpected packetId: ${packetId}`);
        }
        else {
            const target = alltargets[packetId + SEND_AFTER_OFFSET];
            if (target !== null && !target.isEmpty()) {
                const ignore = target.fire(data.valueptr, data.length, ni, packetId) === common_1.CANCEL;
                util_1._tickCallback();
                if (ignore)
                    return;
            }
        }
    }
    catch (err) {
        source_map_support_1.remapAndPrintError(err);
    }
    sendInternalOriginal(handler, ni, packet, data);
}
//# sourceMappingURL=data:application/json;base64,