"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dll = exports.CriticalSection = exports.ThreadHandle = exports.NativeModule = void 0;
const asmcode = require("./asm/asmcode");
const common_1 = require("./common");
const core_1 = require("./core");
const dllraw_1 = require("./dllraw");
const makefunc_1 = require("./makefunc");
/**
 * Load external DLL
 * You can call native functions by name
 */
class NativeModule extends core_1.VoidPointer {
    /**
     * @deprecated use NativeModule.load(moduleName)
     */
    constructor(moduleNameOrPtr) {
        super(moduleNameOrPtr !== undefined ? moduleNameOrPtr instanceof core_1.VoidPointer ? moduleNameOrPtr : dll.kernel32.LoadLibraryW(moduleNameOrPtr) : undefined);
        this.name = '[undefined]';
    }
    getProcAddress(name) {
        common_1.abstract();
    }
    getProcAddressByOrdinal(ordinal) {
        common_1.abstract();
    }
    /**
     * get the procedure from DLL as a javascript method
     *
     * wrapper codes are not deleted permanently.
     * do not use it dynamically.
     *
     * @param name name of procedure
     * @param returnType RawTypeId or *Pointer
     * @param this RawTypeId or *Pointer, if it's non-null, it passes this parameter as first parameter.
     * @param structureReturn if set it to true, it allocates first parameter with the returning class and returns it.
     * @param params RawTypeId or *Pointer
     */
    getFunction(name, returnType, opts, ...params) {
        const addr = this.getProcAddress(name);
        if (addr.isNull())
            throw Error(this.name + ': Cannot find procedure, ' + name);
        return makefunc_1.makefunc.js(addr, returnType, opts, ...params);
    }
    toString() {
        return `[${this.name}: ${super.toString()}]`;
    }
    /**
     * get NativeModule by name
     * wrapper of GetModuleHandleW
     * if you want to load the new module. Please use NativeModule.load instead
     * @param name return exe module if null
     */
    static get(name) {
        const module = getModuleHandle(name);
        if (module.isNull())
            throw Error(name + ': Cannot find module');
        module.name = name || '[exe]';
        return module;
    }
    /**
     * load NativeModule by name
     * wrapper of LoadLibraryW
     */
    static load(name) {
        const module = dll.kernel32.LoadLibraryW(name);
        if (module.isNull()) {
            const errno = dll.kernel32.GetLastError();
            const errobj = Error(name + ': Cannot load module, errno=' + errno);
            errobj.errno = errno;
            throw errobj;
        }
        module.name = name;
        return module;
    }
}
exports.NativeModule = NativeModule;
const getModuleHandle = makefunc_1.makefunc.js(core_1.cgate.GetModuleHandleWPtr, NativeModule, null, makefunc_1.RawTypeId.StringUtf16);
class ThreadHandle extends core_1.VoidPointer {
    close() {
        return dll.kernel32.CloseHandle(this);
    }
}
exports.ThreadHandle = ThreadHandle;
class CriticalSection extends core_1.AllocatedPointer {
    constructor() {
        super(CriticalSection.bytes);
        dll.kernel32.InitializeCriticalSection(this);
    }
    enter() {
        dll.kernel32.EnterCriticalSection(this);
    }
    leave() {
        dll.kernel32.LeaveCriticalSection(this);
    }
    tryEnter() {
        return dll.kernel32.TryEnterCriticalSection(this);
    }
    dispose() {
        dll.kernel32.DeleteCriticalSection(this);
    }
}
exports.CriticalSection = CriticalSection;
CriticalSection.bytes = 40;
NativeModule.prototype.getProcAddress = makefunc_1.makefunc.js(core_1.cgate.GetProcAddressPtr, core_1.NativePointer, { this: NativeModule }, makefunc_1.RawTypeId.StringUtf8);
NativeModule.prototype.getProcAddressByOrdinal = makefunc_1.makefunc.js(core_1.cgate.GetProcAddressPtr, core_1.NativePointer, { this: NativeModule }, makefunc_1.RawTypeId.Int32);
var dll;
(function (dll) {
    let ntdll;
    (function (ntdll) {
        ntdll.module = NativeModule.get('ntdll.dll');
        const wine_get_version_ptr = ntdll.module.getProcAddress('wine_get_version');
        ntdll.wine_get_version = wine_get_version_ptr.isNull() ?
            null : makefunc_1.makefunc.js(wine_get_version_ptr, makefunc_1.RawTypeId.StringUtf8);
    })(ntdll = dll.ntdll || (dll.ntdll = {}));
    let kernel32;
    (function (kernel32) {
        kernel32.module = dllraw_1.dllraw.kernel32.module.as(NativeModule);
        kernel32.LoadLibraryW = kernel32.module.getFunction('LoadLibraryW', NativeModule, null, makefunc_1.RawTypeId.StringUtf16);
        kernel32.LoadLibraryExW = kernel32.module.getFunction('LoadLibraryExW', NativeModule, null, makefunc_1.RawTypeId.StringUtf16, core_1.VoidPointer, makefunc_1.RawTypeId.Int32);
        kernel32.FreeLibrary = kernel32.module.getFunction('FreeLibrary', makefunc_1.RawTypeId.Boolean, null, NativeModule);
        kernel32.VirtualProtect = kernel32.module.getFunction('VirtualProtect', makefunc_1.RawTypeId.Boolean, null, core_1.VoidPointer, makefunc_1.RawTypeId.FloatAsInt64, makefunc_1.RawTypeId.FloatAsInt64, makefunc_1.RawTypeId.Buffer);
        kernel32.GetLastError = kernel32.module.getFunction('GetLastError', makefunc_1.RawTypeId.Int32);
        kernel32.CreateThread = kernel32.module.getFunction('CreateThread', ThreadHandle, null, core_1.VoidPointer, makefunc_1.RawTypeId.FloatAsInt64, core_1.VoidPointer, core_1.VoidPointer, makefunc_1.RawTypeId.Int32, makefunc_1.RawTypeId.Buffer);
        kernel32.TerminateThread = kernel32.module.getFunction('TerminateThread', makefunc_1.RawTypeId.Void, null, ThreadHandle, makefunc_1.RawTypeId.Int32);
        kernel32.CloseHandle = kernel32.module.getFunction('CloseHandle', makefunc_1.RawTypeId.Boolean, null, core_1.VoidPointer);
        kernel32.WaitForSingleObject = kernel32.module.getFunction('WaitForSingleObject', makefunc_1.RawTypeId.Int32, null, core_1.VoidPointer, makefunc_1.RawTypeId.Int32);
        kernel32.CreateEventW = kernel32.module.getFunction('CreateEventW', core_1.VoidPointer, null, core_1.VoidPointer, makefunc_1.RawTypeId.Int32, makefunc_1.RawTypeId.Int32, makefunc_1.RawTypeId.StringUtf16);
        kernel32.SetEvent = kernel32.module.getFunction('SetEvent', makefunc_1.RawTypeId.Boolean, null, core_1.VoidPointer);
        kernel32.GetCurrentThreadId = makefunc_1.makefunc.js(dllraw_1.dllraw.kernel32.GetCurrentThreadId, makefunc_1.RawTypeId.Int32);
        kernel32.InitializeCriticalSection = kernel32.module.getFunction('InitializeCriticalSection', makefunc_1.RawTypeId.Void, null, CriticalSection);
        kernel32.DeleteCriticalSection = kernel32.module.getFunction('DeleteCriticalSection', makefunc_1.RawTypeId.Void, null, CriticalSection);
        kernel32.EnterCriticalSection = kernel32.module.getFunction('EnterCriticalSection', makefunc_1.RawTypeId.Void, null, CriticalSection);
        kernel32.LeaveCriticalSection = kernel32.module.getFunction('LeaveCriticalSection', makefunc_1.RawTypeId.Void, null, CriticalSection);
        kernel32.TryEnterCriticalSection = kernel32.module.getFunction('TryEnterCriticalSection', makefunc_1.RawTypeId.Boolean, null, CriticalSection);
        kernel32.FormatMessageW = kernel32.module.getFunction('FormatMessageW', makefunc_1.RawTypeId.Int32, null, makefunc_1.RawTypeId.Int32, core_1.VoidPointer, makefunc_1.RawTypeId.Int32, makefunc_1.RawTypeId.Int32, core_1.VoidPointer, makefunc_1.RawTypeId.Int32, core_1.VoidPointer);
        kernel32.LocalFree = kernel32.module.getFunction('LocalFree', core_1.VoidPointer, null, core_1.VoidPointer);
        kernel32.SetDllDirectoryW = kernel32.module.getFunction('SetDllDirectoryW', makefunc_1.RawTypeId.Boolean, null, makefunc_1.RawTypeId.StringUtf16);
        kernel32.GetProcAddress = core_1.cgate.GetProcAddress;
        kernel32.GetModuleHandleW = core_1.cgate.GetModuleHandleW;
    })(kernel32 = dll.kernel32 || (dll.kernel32 = {}));
    let ucrtbase;
    (function (ucrtbase) {
        ucrtbase.module = dllraw_1.dllraw.ucrtbase.module.as(NativeModule);
        ucrtbase._beginthreadex = ucrtbase.module.getFunction('_beginthreadex', ThreadHandle, null, core_1.VoidPointer, makefunc_1.RawTypeId.FloatAsInt64, core_1.VoidPointer, core_1.VoidPointer, makefunc_1.RawTypeId.Int32, makefunc_1.RawTypeId.Buffer);
        ucrtbase.free = ucrtbase.module.getFunction('free', makefunc_1.RawTypeId.Void, null, core_1.VoidPointer);
        ucrtbase.malloc = makefunc_1.makefunc.js(dllraw_1.dllraw.ucrtbase.malloc, core_1.NativePointer, { nullableReturn: true }, makefunc_1.RawTypeId.FloatAsInt64);
        ucrtbase.__stdio_common_vsprintf = ucrtbase.module.getProcAddress('__stdio_common_vsprintf');
    })(ucrtbase = dll.ucrtbase || (dll.ucrtbase = {}));
    let vcruntime140;
    (function (vcruntime140) {
        vcruntime140.module = dllraw_1.dllraw.vcruntime140.module.as(NativeModule);
        vcruntime140.memset = vcruntime140.module.getFunction('memset', makefunc_1.RawTypeId.Void, null, core_1.VoidPointer, makefunc_1.RawTypeId.Int32, makefunc_1.RawTypeId.FloatAsInt64);
        vcruntime140.memcmp = vcruntime140.module.getFunction('memcmp', makefunc_1.RawTypeId.Int32, null, core_1.VoidPointer, core_1.VoidPointer, makefunc_1.RawTypeId.FloatAsInt64);
        vcruntime140.memcpy = makefunc_1.makefunc.js(dllraw_1.dllraw.vcruntime140.memcpy, makefunc_1.RawTypeId.Void, null, core_1.VoidPointer, core_1.VoidPointer, makefunc_1.RawTypeId.FloatAsInt64);
        vcruntime140.memchr = vcruntime140.module.getFunction('memchr', core_1.NativePointer, null, core_1.VoidPointer, makefunc_1.RawTypeId.Int32, makefunc_1.RawTypeId.FloatAsInt64);
    })(vcruntime140 = dll.vcruntime140 || (dll.vcruntime140 = {}));
    let msvcp140;
    (function (msvcp140) {
        msvcp140.module = NativeModule.load('msvcp140.dll');
        msvcp140._Cnd_do_broadcast_at_thread_exit = msvcp140.module.getProcAddress("_Cnd_do_broadcast_at_thread_exit");
        msvcp140.std_cin = msvcp140.module.getProcAddress("?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A");
    })(msvcp140 = dll.msvcp140 || (dll.msvcp140 = {}));
})(dll = exports.dll || (exports.dll = {}));
const RtlCaptureContext = dll.kernel32.module.getProcAddress('RtlCaptureContext');
asmcode.RtlCaptureContext = RtlCaptureContext;
asmcode.memset = dll.vcruntime140.memset.pointer;
//# sourceMappingURL=data:application/json;base64,