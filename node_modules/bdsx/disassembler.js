"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.disasm = void 0;
const assembler_1 = require("./assembler");
const core_1 = require("./core");
const util_1 = require("./util");
const colors = require("colors");
function readConstNumber(size, ptr) {
    switch (size) {
        case assembler_1.OperationSize.byte:
            return ptr.readInt8();
        case assembler_1.OperationSize.word:
            return ptr.readInt16();
        case assembler_1.OperationSize.dword:
            return ptr.readInt32();
        default:
            throw Error(`Unexpected operation size: ${size}`);
    }
}
function readConst(size, ptr) {
    switch (size) {
        case assembler_1.OperationSize.void:
            return 0;
        case assembler_1.OperationSize.byte:
            return ptr.readInt8();
        case assembler_1.OperationSize.word:
            return ptr.readInt16();
        case assembler_1.OperationSize.dword:
            return ptr.readInt32();
        case assembler_1.OperationSize.qword:
            return ptr.readBin64();
        default:
            throw Error(`Unexpected operation size: ${size}`);
    }
}
function walk_offset(rex, ptr) {
    const v = ptr.readUint8();
    const r1 = (v & 0x7) | ((rex & 1) << 3);
    const r2 = ((v >> 3) & 0x7) | ((rex & 4) << 1);
    if ((v & 0xc0) !== 0xc0) {
        if (r1 === assembler_1.Register.rsp && ptr.readUint8() !== 0x24) {
            return null;
        }
    }
    if ((v & 0xc0) === 0) {
        if (r1 === assembler_1.Register.rbp) {
            return {
                offset: assembler_1.OperationSize.dword,
                r1: assembler_1.Register.rip,
                r2
            };
        }
    }
    switch (v & 0xc0) {
        case 0x40:
            return {
                offset: assembler_1.OperationSize.byte,
                r1,
                r2,
            };
        case 0x80:
            return {
                offset: assembler_1.OperationSize.dword,
                r1,
                r2,
            };
        case 0xc0:
            return {
                offset: null,
                r1,
                r2,
            };
    }
    return {
        offset: assembler_1.OperationSize.void,
        r1,
        r2,
    };
}
function walk_oper_r_c(oper, register, chr, size) {
    return new assembler_1.asm.Operation(assembler_1.asm.code[assembler_1.Operator[oper] + '_r_c'], [register, chr, size]);
}
function walk_oper_rp_c(oper, register, multiply, offset, chr, size) {
    return new assembler_1.asm.Operation(assembler_1.asm.code[assembler_1.Operator[oper] + '_rp_c'], [register, multiply, offset, chr, size]);
}
function walk_ojmp(jumpoper, offset) {
    return new assembler_1.asm.Operation(assembler_1.asm.code[assembler_1.JumpOperation[jumpoper] + '_c'], [offset]);
}
function walk_addr_oper(opername, dwordBit, readBit, info, size, ptr, isFloat) {
    const sig = isFloat ? 'f' : 'r';
    if (dwordBit === 0)
        size = assembler_1.OperationSize.byte;
    if (readBit) { // reverse
        if (info.offset === null) { // mov_r_r
            return new assembler_1.asm.Operation(assembler_1.asm.code[`${opername}_${sig}_${sig}`], [info.r2, info.r1, size]);
        }
        else {
            const offset = readConst(info.offset, ptr);
            return new assembler_1.asm.Operation(assembler_1.asm.code[`${opername}_${sig}_rp`], [info.r2, info.r1, 1, offset, size]);
        }
    }
    else {
        if (info.offset === null) { // mov_r_r
            return new assembler_1.asm.Operation(assembler_1.asm.code[`${opername}_${sig}_${sig}`], [info.r1, info.r2, size]);
        }
        else {
            const offset = readConst(info.offset, ptr);
            return new assembler_1.asm.Operation(assembler_1.asm.code[`${opername}_rp_${sig}`], [info.r1, 1, offset, info.r2, size]);
        }
    }
}
function walk_raw(ptr) {
    let rex = 0x40;
    let size = assembler_1.OperationSize.dword;
    for (;;) {
        const v = ptr.readUint8();
        if (v === 0x65) {
            return new assembler_1.asm.Operation(assembler_1.asm.code.gs, []);
        }
        else if (v === 0x64) {
            return new assembler_1.asm.Operation(assembler_1.asm.code.fs, []);
        }
        else if (v === 0x2e) {
            return new assembler_1.asm.Operation(assembler_1.asm.code.cs, []);
        }
        else if (v === 0x26) {
            return new assembler_1.asm.Operation(assembler_1.asm.code.es, []);
        }
        else if (v === 0x36) {
            return new assembler_1.asm.Operation(assembler_1.asm.code.ss, []);
        }
        else if ((v & 0xf2) === 0x40) { // rex
            rex = v;
            size = (rex & 0x08) ? assembler_1.OperationSize.qword : assembler_1.OperationSize.dword;
            size = (rex & 0x08) ? assembler_1.OperationSize.qword : assembler_1.OperationSize.dword;
            continue;
        }
        if (v === 0x66) { // data16
            rex = v;
            size = assembler_1.OperationSize.word;
            continue;
        }
        else if (v === 0x90) { // nop
            return new assembler_1.asm.Operation(assembler_1.asm.code.nop, []);
        }
        else if (v === 0xcc) { // int3
            return new assembler_1.asm.Operation(assembler_1.asm.code.int3, []);
        }
        else if (v === 0xcd) { // int3
            const code = ptr.readUint8();
            return new assembler_1.asm.Operation(assembler_1.asm.code.int_c, [code]);
        }
        else if (v === 0xe8) { // call dword
            const value = ptr.readInt32();
            return new assembler_1.asm.Operation(assembler_1.asm.code.call_c, [value]);
        }
        else if (v === 0xe9) { // jmp dword
            const value = ptr.readInt32();
            return new assembler_1.asm.Operation(assembler_1.asm.code.jmp_c, [value]);
        }
        else if ((v & 0xf0) === 0x50) { // push or pop
            const reg = (v & 0x7) | ((rex & 0x1) << 3);
            if (v & 0x08)
                return new assembler_1.asm.Operation(assembler_1.asm.code.pop_r, [reg]);
            else
                return new assembler_1.asm.Operation(assembler_1.asm.code.push_r, [reg]);
        }
        else if ((v & 0xfc) === 0x84) { // test or xchg
            const info = walk_offset(rex, ptr);
            if (info === null)
                break; // bad
            if ((v & 0x2) !== 0) { // xchg
                if (info.offset === null) {
                    return new assembler_1.asm.Operation(assembler_1.asm.code.xchg_r_r, [info.r1, info.r2, size]);
                }
                else {
                    return new assembler_1.asm.Operation(assembler_1.asm.code.xchg_r_rp, [info.r1, info.r2, 1, info.offset, size]);
                }
            }
            else { // test
                if (info.offset === null) {
                    return new assembler_1.asm.Operation(assembler_1.asm.code.test_r_r, [info.r1, info.r2, size]);
                }
                else {
                    return new assembler_1.asm.Operation(assembler_1.asm.code.test_r_rp, [info.r1, info.r2, 1, info.offset, size]);
                }
            }
        }
        else if ((v & 0xfc) === 0x80) { // const operation
            const lowflag = v & 3;
            if (lowflag === 2)
                break; // bad
            if (lowflag === 0)
                size = assembler_1.OperationSize.byte;
            let constsize = size === assembler_1.OperationSize.qword ? assembler_1.OperationSize.dword : size;
            if (lowflag === 3)
                constsize = assembler_1.OperationSize.byte;
            const info = walk_offset(rex, ptr);
            if (info === null)
                break; // bad
            if (info.offset === null) {
                const chr = readConstNumber(constsize, ptr);
                return walk_oper_r_c(info.r2 & 7, info.r1, chr, size);
            }
            else {
                const offset = readConstNumber(info.offset, ptr);
                const chr = readConstNumber(constsize, ptr);
                return walk_oper_rp_c(info.r2 & 7, info.r1, 1, offset, chr, size);
            }
        }
        else if ((v & 0xc0) === 0x00) { // operation
            if ((v & 6) === 6) {
                if (v === 0x0f) {
                    const v2 = ptr.readUint8();
                    if ((v2 & 0xf0) === 0x80) {
                        const jumpoper = v2 & 0xf;
                        const offset = ptr.readInt32();
                        return walk_ojmp(jumpoper, offset);
                    }
                    else if (v2 === 0x29) { // movaps
                        const info = walk_offset(rex, ptr);
                        if (info === null)
                            break; // bad
                        return walk_addr_oper('movaps', 1, (v2 & 1) ^ 1, info, assembler_1.OperationSize.xmmword, ptr, true);
                    }
                }
            }
            else {
                const oper = (v >> 3) & 7;
                if ((v & 0x04) !== 0) {
                    if ((v & 1) === 0)
                        size = assembler_1.OperationSize.byte;
                    const chr = ptr.readInt32();
                    return walk_oper_r_c(oper, assembler_1.Register.rax, chr, size);
                }
                const info = walk_offset(rex, ptr);
                if (info === null)
                    break; // bad
                return walk_addr_oper(assembler_1.Operator[oper], v & 1, v & 2, info, size, ptr, false);
            }
        }
        else if ((v & 0xfe) === 0xc6) { // mov rp c
            const info = walk_offset(rex, ptr);
            if (info === null)
                break; // bad
            if (!(v & 0x01))
                size = assembler_1.OperationSize.byte;
            if (info.offset === null) {
                const value = readConst(size, ptr);
                return new assembler_1.asm.Operation(assembler_1.asm.code.mov_r_c, [info.r1, value, size]);
            }
            else {
                const offset = readConst(info.offset, ptr);
                const value = readConst(size === assembler_1.OperationSize.qword ? assembler_1.OperationSize.dword : size, ptr);
                return new assembler_1.asm.Operation(assembler_1.asm.code.mov_rp_c, [info.r1, 1, offset, value, size]);
            }
        }
        else if ((v & 0xf8) === 0x88) { // mov variation
            if (v === 0xef)
                break; // bad
            const info = walk_offset(rex, ptr);
            if (info === null)
                break; // bad
            if (v === 0x8d) { // lea rp_c
                if (info.offset === null)
                    break; // bad
                const offset = readConst(info.offset, ptr);
                return new assembler_1.asm.Operation(assembler_1.asm.code.lea_r_rp, [info.r2, info.r1, 1, offset, size]);
            }
            if (v & 0x04)
                size = assembler_1.OperationSize.word;
            return walk_addr_oper('mov', v & 1, v & 2, info, size, ptr, false);
        }
        else if ((v & 0xf0) === 0x70) {
            const jumpoper = v & 0xf;
            const offset = ptr.readInt8();
            return walk_ojmp(jumpoper, offset);
        }
        break;
    }
    return null;
}
var disasm;
(function (disasm) {
    function walk(ptr) {
        const low = ptr.getAddressLow();
        const high = ptr.getAddressHigh();
        const res = walk_raw(ptr);
        if (res !== null) {
            res.size = (ptr.getAddressHigh() - high) * 0x100000000 + (ptr.getAddressLow() - low);
            return res;
        }
        ptr.setAddress(low, high);
        let size = 16;
        while (size !== 0) {
            try {
                console.error(colors.red('disasm.walk: unimplemented opcode, failed'));
                console.error(colors.red('disasm.walk: Please tell rua.kr about it'));
                console.trace(colors.red(`opcode: ${util_1.hex(ptr.getBuffer(size))}`));
                break;
            }
            catch (err) {
                size--;
            }
        }
        return null;
    }
    disasm.walk = walk;
    function process(ptr, size) {
        const operations = [];
        const nptr = ptr.as(core_1.NativePointer);
        let oper = null;
        let ressize = 0;
        while ((ressize < size) && (oper = disasm.walk(nptr)) !== null) {
            operations.push(oper);
            ressize += oper.size;
        }
        return new assembler_1.asm.Operations(operations, ressize);
    }
    disasm.process = process;
    function check(hexstr, quiet) {
        const buffer = typeof hexstr === 'string' ? util_1.unhex(hexstr) : hexstr;
        const ptr = new core_1.NativePointer;
        ptr.setAddressFromBuffer(buffer);
        const opers = [];
        if (!quiet)
            console.log();
        let oper = null;
        let pos = 0;
        const size = buffer.length;
        while ((pos < size) && (oper = disasm.walk(ptr)) !== null) {
            const posend = pos + oper.size;
            if (!quiet)
                console.log(oper.toString() + colors.gray(' // ' + util_1.hex(buffer.subarray(pos, posend))));
            pos = posend;
            opers.push(oper);
        }
        return new assembler_1.asm.Operations(opers, pos);
    }
    disasm.check = check;
})(disasm = exports.disasm || (exports.disasm = {}));
//# sourceMappingURL=data:application/json;base64,